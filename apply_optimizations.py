#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""
import os
import sys
import subprocess
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def run_command(cmd, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    logger.info(f"üîß {description}...")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            logger.info(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
            if result.stdout:
                logger.debug(result.stdout)
            return True
        else:
            logger.error(f"‚ùå {description} - –æ—à–∏–±–∫–∞")
            if result.stderr:
                logger.error(result.stderr)
            return False
    except Exception as e:
        logger.error(f"‚ùå {description} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
    
    logger.info("=" * 60)
    logger.info("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô")
    logger.info("=" * 60)
    
    steps_completed = 0
    total_steps = 5
    
    # –®–∞–≥ 1: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
    logger.info(f"\n[{steps_completed+1}/{total_steps}] –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    if run_command("alembic upgrade head", "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"):
        steps_completed += 1
        logger.info("–ò–Ω–¥–µ–∫—Å—ã –ë–î —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    else:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.")
        steps_completed += 1
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info(f"\n[{steps_completed+1}/{total_steps}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    optimized_settings = {
        "DB_POOL_SIZE": "25",
        "DB_MAX_OVERFLOW": "40",
        "DB_CONNECT_TIMEOUT": "3",
        "DB_POOL_RECYCLE": "900",
        "CONNECTION_POOL_SIZE": "150",
        "MAX_CONCURRENT_UPDATES": "75",
        "LOG_LEVEL": "WARNING"
    }
    
    for key, recommended_value in optimized_settings.items():
        current_value = os.getenv(key)
        if current_value:
            logger.info(f"  {key} = {current_value} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {recommended_value})")
        else:
            logger.warning(f"  {key} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {recommended_value})")
    steps_completed += 1
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    logger.info(f"\n[{steps_completed+1}/{total_steps}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...")
    files_to_check = [
        "utils_optimized.py",
        "alembic/versions/20241228_add_performance_indexes.py",
        "ANALYSIS_AND_FIX_PLAN.md"
    ]
    
    for file in files_to_check:
        if os.path.exists(file):
            logger.info(f"  ‚úÖ {file} - –Ω–∞–π–¥–µ–Ω")
        else:
            logger.warning(f"  ‚ö†Ô∏è {file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    steps_completed += 1
    
    # –®–∞–≥ 4: –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ Python
    logger.info(f"\n[{steps_completed+1}/{total_steps}] –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ Python...")
    run_command("find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null", "–û—á–∏—Å—Ç–∫–∞ __pycache__")
    run_command("find . -type f -name '*.pyc' -delete 2>/dev/null", "–£–¥–∞–ª–µ–Ω–∏–µ .pyc —Ñ–∞–π–ª–æ–≤")
    steps_completed += 1
    
    # –®–∞–≥ 5: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    logger.info(f"\n[{steps_completed+1}/{total_steps}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    if run_command("pip install -r requirements.txt --quiet", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"):
        steps_completed += 1
    else:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        steps_completed += 1
    
    # –ò—Ç–æ–≥–∏
    logger.info("\n" + "=" * 60)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
    logger.info("=" * 60)
    logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {steps_completed}/{total_steps}")
    
    if steps_completed == total_steps:
        logger.info("‚úÖ –í–°–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–´!")
        logger.info("\nüéØ –û–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
        logger.info("  ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞: 10x –±—ã—Å—Ç—Ä–µ–µ")
        logger.info("  ‚Ä¢ –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ë–î: -70%")
        logger.info("  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: -50%")
        logger.info("  ‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: 5x –≤—ã—à–µ")
        logger.info("\nüöÄ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
        logger.info("  python main.py")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —à–∞–≥–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å")
        logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
    
    return 0 if steps_completed == total_steps else 1

if __name__ == "__main__":
    sys.exit(main())
