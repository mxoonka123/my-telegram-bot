import logging
import httpx
import random
import asyncio
import re
import uuid
import json
from datetime import datetime, timezone, timedelta
from telegram import Update, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction, ParseMode
from telegram.error import BadRequest # <--- –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters, CallbackQueryHandler
)
from sqlalchemy.orm import Session, joinedload
from sqlalchemy.orm.attributes import flag_modified
from sqlalchemy.exc import IntegrityError, SQLAlchemyError
from sqlalchemy import func
from typing import List, Dict, Any, Optional, Union, Tuple

from yookassa import Configuration, Payment
from yookassa.domain.models.currency import Currency
from yookassa.domain.request.payment_request_builder import PaymentRequestBuilder
from yookassa.domain.models.receipt import Receipt, ReceiptItem


from config import (
    LANGDOCK_API_KEY, LANGDOCK_BASE_URL, LANGDOCK_MODEL,
    DEFAULT_MOOD_PROMPTS, YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY,
    SUBSCRIPTION_PRICE_RUB, SUBSCRIPTION_CURRENCY, WEBHOOK_URL_BASE,
    SUBSCRIPTION_DURATION_DAYS, FREE_DAILY_MESSAGE_LIMIT, PAID_DAILY_MESSAGE_LIMIT,
    FREE_PERSONA_LIMIT, PAID_PERSONA_LIMIT, MAX_CONTEXT_MESSAGES_SENT_TO_LLM,
    ADMIN_USER_ID
)
from db import (
    get_context_for_chat_bot, add_message_to_context,
    set_mood_for_chat_bot, get_mood_for_chat_bot, get_or_create_user,
    create_persona_config, get_personas_by_owner, get_persona_by_name_and_owner,
    get_persona_by_id_and_owner, check_and_update_user_limits, activate_subscription,
    create_bot_instance, link_bot_instance_to_chat, delete_persona_config,
    get_db, get_active_chat_bot_instance_with_relations,
    User, PersonaConfig, BotInstance, ChatBotInstance, ChatContext
)
from persona import Persona
from utils import postprocess_response, extract_gif_links, get_time_info, escape_markdown_v2

logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_USER_ID

EDIT_PERSONA_CHOICE, EDIT_FIELD, EDIT_MOOD_CHOICE, EDIT_MOOD_NAME, EDIT_MOOD_PROMPT, DELETE_MOOD_CONFIRM, DELETE_PERSONA_CONFIRM, EDIT_MAX_MESSAGES = range(8)

FIELD_MAP = {
    "name": escape_markdown_v2("–∏–º—è"),
    "description": escape_markdown_v2("–æ–ø–∏—Å–∞–Ω–∏–µ"),
    "system_prompt_template": escape_markdown_v2("—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"),
    "should_respond_prompt_template": escape_markdown_v2("–ø—Ä–æ–º–ø—Ç '–æ—Ç–≤–µ—á–∞—Ç—å?'"),
    "spam_prompt_template": escape_markdown_v2("–ø—Ä–æ–º–ø—Ç —Å–ø–∞–º–∞"),
    "photo_prompt_template": escape_markdown_v2("–ø—Ä–æ–º–ø—Ç —Ñ–æ—Ç–æ"),
    "voice_prompt_template": escape_markdown_v2("–ø—Ä–æ–º–ø—Ç –≥–æ–ª–æ—Å–∞"),
    "max_response_messages": escape_markdown_v2("–º–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç–µ")
}

TOS_TEXT_RAW = """
**üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –°–µ—Ä–≤–∏—Å–∞ @NunuAiBot**

–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ @NunuAiBot! –ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏. –≠—Ç–æ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ ‚Äî –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è—Å–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –°–µ—Ä–≤–∏—Å–∞. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.

–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 01.03.2025

**1. –û —á–µ–º —ç—Ç–æ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ?**
1.1. –≠—Ç–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–°–æ–≥–ª–∞—à–µ–Ω–∏–µ") ‚Äî –¥–æ–≥–æ–≤–æ—Ä –º–µ–∂–¥—É –≤–∞–º–∏ (–¥–∞–ª–µ–µ ‚Äì "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" –∏–ª–∏ "–í—ã") –∏ –Ω–∞–º–∏ (–≤–ª–∞–¥–µ–ª—å—Ü–µ–º Telegram-–±–æ—Ç–∞ @NunuAiBot, –¥–∞–ª–µ–µ ‚Äì "–°–µ—Ä–≤–∏—Å" –∏–ª–∏ "–ú—ã"). –û–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –°–µ—Ä–≤–∏—Å–∞.
1.2. –ù–∞—á–∏–Ω–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à –°–µ—Ä–≤–∏—Å (–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É), –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∏, –ø–æ–Ω—è–ª–∏ –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å–æ –≤—Å–µ–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ —ç—Ç–æ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è. –ï—Å–ª–∏ –í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Ö–æ—Ç—è –±—ã —Å –æ–¥–Ω–∏–º –ø—É–Ω–∫—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –°–µ—Ä–≤–∏—Å–∞.
1.3. –ù–∞—à –°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –æ–±—â–∞—Ç—å—Å—è —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏ –Ω–∞ –±–∞–∑–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ (–¥–∞–ª–µ–µ ‚Äì "–õ–∏—á–Ω–æ—Å—Ç–∏" –∏–ª–∏ "AI-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏").

**2. –ü—Ä–æ –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ–ø–ª–∞—Ç—É**
2.1. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–≤–∞ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ Premium (–ø–ª–∞—Ç–Ω—ã–π). –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ª–∏–º–∏—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞–Ω—ã –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –∫–æ–º–∞–Ω–¥–∞—Ö `/profile` –∏ `/subscribe`.
2.2. –ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –í–∞–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –ø–µ—Ä–∏–æ–¥ –≤ {subscription_duration} –¥–Ω–µ–π.
2.3. –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {subscription_price} {subscription_currency} –∑–∞ {subscription_duration} –¥–Ω–µ–π.
2.4. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É Yookassa. –í–∞–∂–Ω–æ: –º—ã –Ω–µ –ø–æ–ª—É—á–∞–µ–º –∏ –Ω–µ —Ö—Ä–∞–Ω–∏–º –í–∞—à–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ —Ç.–ø.). –í—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ.
2.5. **–ü–æ–ª–∏—Ç–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤:** –ü–æ–∫—É–ø–∞—è –ø–æ–¥–ø–∏—Å–∫—É, –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –°–µ—Ä–≤–∏—Å–∞ —Å—Ä–∞–∑—É –∂–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. –ü–æ—Å–∫–æ–ª—å–∫—É –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É—Å–ª—É–≥—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç—É–ø–∞, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, **–Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É**.
2.6. –í —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö, –µ—Å–ª–∏ –°–µ—Ä–≤–∏—Å –æ–∫–∞–∂–µ—Ç—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –Ω–∞—à–µ–π –≤–∏–Ω–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–æ–ª–µ–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥), –∏ —É –í–∞—Å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (–∫–æ–Ω—Ç–∞–∫—Ç —É–∫–∞–∑–∞–Ω –≤ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –±–æ—Ç–∞ –∏ –≤ –Ω–∞—à–µ–º Telegram-–∫–∞–Ω–∞–ª–µ). –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–ª–∏—Ç—å –í–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å—Ä–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –°–µ—Ä–≤–∏—Å–∞. –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.

**3. –í–∞—à–∏ –∏ –Ω–∞—à–∏ –ø—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏**
3.1. –ß—Ç–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç –í–∞—Å (–í–∞—à–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏):
*   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –°–µ—Ä–≤–∏—Å —Ç–æ–ª—å–∫–æ –≤ –∑–∞–∫–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –Ω–∏–∫–∞–∫–∏–µ –∑–∞–∫–æ–Ω—ã –ø—Ä–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.
*   –ù–µ –ø—ã—Ç–∞—Ç—å—Å—è –≤–º–µ—à–∞—Ç—å—Å—è –≤ —Ä–∞–±–æ—Ç—É –°–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø.
*   –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–ø–∞–º–∞, –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –∏–ª–∏ –ª—é–±–æ–π –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
*   –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ–ø–ª–∞—Ç—ã), –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—É—é –∏ –ø—Ä–∞–≤–¥–∏–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
*   –ü–æ—Å–∫–æ–ª—å–∫—É —É –°–µ—Ä–≤–∏—Å–∞ –Ω–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è.
3.2. –ß—Ç–æ –º–æ–∂–µ–º –¥–µ–ª–∞—Ç—å –º—ã (–ù–∞—à–∏ –ø—Ä–∞–≤–∞):
*   –ú—ã –º–æ–∂–µ–º –º–µ–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è —ç—Ç–æ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è. –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –º—ã —É–≤–µ–¥–æ–º–∏–º –í–∞—Å, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–≤ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –°–æ–≥–ª–∞—à–µ–Ω–∏—è –≤ –Ω–∞—à–µ–º Telegram-–∫–∞–Ω–∞–ª–µ –∏–ª–∏ –∏–Ω—ã–º –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –≤ —Ä–∞–º–∫–∞—Ö –°–µ—Ä–≤–∏—Å–∞. –í–∞—à–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –°–µ—Ä–≤–∏—Å–∞ –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.
*   –ú—ã –º–æ–∂–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –°–µ—Ä–≤–∏—Å—É, –µ—Å–ª–∏ –í—ã –Ω–∞—Ä—É—à–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —ç—Ç–æ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è.
*   –ú—ã –º–æ–∂–µ–º –∏–∑–º–µ–Ω—è—Ç—å —Å–∞–º –°–µ—Ä–≤–∏—Å: –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–±–∏—Ä–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, –º–µ–Ω—è—Ç—å –ª–∏–º–∏—Ç—ã –∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏.

**4. –í–∞–∂–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏**
4.1. –°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è "–∫–∞–∫ –µ—Å—Ç—å". –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –º—ã –Ω–µ –º–æ–∂–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –±–µ–∑ —Å–±–æ–µ–≤ –∏–ª–∏ –æ—à–∏–±–æ–∫. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–Ω–æ–≥–¥–∞ –ø–æ–¥–≤–æ–¥—è—Ç, –∏ –º—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –≤–æ–∑–Ω–∏–∫—à–∏–µ –Ω–µ –ø–æ –Ω–∞—à–µ–π –ø—Ä—è–º–æ–π –≤–∏–Ω–µ.
4.2. –ü–æ–º–Ω–∏—Ç–µ, –õ–∏—á–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç. –ò—Ö –æ—Ç–≤–µ—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º–∏, –Ω–µ–ø–æ–ª–Ω—ã–º–∏, —Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –í–∞—à–∏–º –æ–∂–∏–¥–∞–Ω–∏—è–º –∏–ª–∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏. –ú—ã –Ω–µ –Ω–µ—Å–µ–º –Ω–∏–∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö AI-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏. –ù–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∏—Ö –∫–∞–∫ –∏—Å—Ç–∏–Ω—É –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç.
4.3. –ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ –ø—Ä—è–º—ã–µ –∏–ª–∏ –∫–æ—Å–≤–µ–Ω–Ω—ã–µ —É–±—ã—Ç–∫–∏ –∏–ª–∏ —É—â–µ—Ä–±, –∫–æ—Ç–æ—Ä—ã–π –í—ã –º–æ–≥–ª–∏ –ø–æ–Ω–µ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è) –°–µ—Ä–≤–∏—Å–∞.

**5. –ü—Ä–æ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ (–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å)**
5.1. –î–ª—è —Ä–∞–±–æ—Ç—ã –°–µ—Ä–≤–∏—Å–∞ –Ω–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è —Å–æ–±–∏—Ä–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –í–∞—à Telegram ID (–¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞), –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram (username, –µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –í–∞–º–∏ –õ–∏—á–Ω–æ—Å—Ç—è—Ö, –∞ —Ç–∞–∫–∂–µ –∏—Å—Ç–æ—Ä–∏—é –í–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –õ–∏—á–Ω–æ—Å—Ç—è–º–∏ (—ç—Ç–æ –Ω—É–∂–Ω–æ AI –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞).
5.2. –ú—ã –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –í–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –ø–µ—Ä–µ–¥–∞—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π.

**6. –î–µ–π—Å—Ç–≤–∏–µ –°–æ–≥–ª–∞—à–µ–Ω–∏—è**
6.1. –ù–∞—Å—Ç–æ—è—â–µ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–æ–º–µ–Ω—Ç–∞, –∫–∞–∫ –í—ã –≤–ø–µ—Ä–≤—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –°–µ—Ä–≤–∏—Å, –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –º–æ–º–µ–Ω—Ç–∞, –ø–æ–∫–∞ –í—ã –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç–µ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –ø–æ–∫–∞ –°–µ—Ä–≤–∏—Å –Ω–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.

**7. –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å**
7.1. –í—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç (—Ç–µ–∫—Å—Ç), –∫–æ—Ç–æ—Ä—ã–π –í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –∏ –≤–≤–æ–¥–∏—Ç–µ –≤ –°–µ—Ä–≤–∏—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AI-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏.
7.2. –í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –Ω–∞–º –Ω–µ–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—É—é, –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω—É—é, –¥–µ–π—Å—Ç–≤—É—é—â—É—é –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ü–µ–ª—è—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –°–µ—Ä–≤–∏—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –í–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞, –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ).
7.3. –í—Å–µ –ø—Ä–∞–≤–∞ –Ω–∞ —Å–∞–º –°–µ—Ä–≤–∏—Å (–∫–æ–¥ –±–æ—Ç–∞, –¥–∏–∑–∞–π–Ω, –Ω–∞–∑–≤–∞–Ω–∏–µ, –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Ç.–¥.) –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É –°–µ—Ä–≤–∏—Å–∞.
7.4. –û—Ç–≤–µ—Ç—ã, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ AI-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏, —è–≤–ª—è—é—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –ª–∏—á–Ω—ã—Ö –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö, –Ω–æ –ø—Ä–∏–∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –æ–Ω–∏ —Å–æ–∑–¥–∞–Ω—ã –º–∞—à–∏–Ω–æ–π –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –í–∞—à–µ–π –∏–ª–∏ –Ω–∞—à–µ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏.

**8. –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è**
8.1. –í—Å–µ —Å–ø–æ—Ä—ã –∏ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è —Ä–µ—à–∞—é—Ç—Å—è –ø—É—Ç–µ–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, —Å–ø–æ—Ä—ã –±—É–¥—É—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏.
8.2. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º, –∫–∞—Å–∞—é—â–∏–º—Å—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è –∏–ª–∏ —Ä–∞–±–æ—Ç—ã –°–µ—Ä–≤–∏—Å–∞, –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –±–æ—Ç–∞ –∏ –≤ –Ω–∞—à–µ–º Telegram-–∫–∞–Ω–∞–ª–µ.
"""
# <<< –ò–ó–ú–ï–ù–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º, –ø–æ—Ç–æ–º —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º >>>
formatted_tos_text = TOS_TEXT_RAW.format(
    subscription_duration=SUBSCRIPTION_DURATION_DAYS,
    subscription_price=f"{SUBSCRIPTION_PRICE_RUB:.0f}",
    subscription_currency=SUBSCRIPTION_CURRENCY
)
# –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –í–ï–°–¨ —Ç–µ–∫—Å—Ç TOS –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
# –í–Ω–∏–º–∞–Ω–∏–µ: –≠—Ç–æ —É–¥–∞–ª–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ Markdown (**...**) —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ TOS_TEXT_RAW.
# –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ** –≤ TOS, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
# –∏–ª–∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ TOS_TEXT_RAW –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.
TOS_TEXT = escape_markdown_v2(formatted_tos_text)


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)
    error_message = "—É–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
    escaped_error_message = escape_markdown_v2(error_message)
    if isinstance(update, Update) and update.effective_message:
        try:
            await update.effective_message.reply_text(escaped_error_message)
        except BadRequest as e:
            logger.error(f"Failed to send ESCAPED error message (BadRequest): {e} - Original Text: '{error_message}'")
            try:
                 await update.effective_message.reply_text(error_message, parse_mode=None)
            except Exception as final_e:
                 logger.error(f"Failed even sending plain text error message: {final_e}")
        except Exception as e:
            logger.error(f"Failed to send escaped error message to user: {e}")


def get_persona_and_context_with_owner(chat_id: str, db: Session) -> Optional[Tuple[Persona, List[Dict[str, str]], User]]:
    chat_instance = get_active_chat_bot_instance_with_relations(db, chat_id)
    if not chat_instance:
        logger.debug(f"No active chatbot instance found for chat {chat_id}")
        return None

    bot_instance = chat_instance.bot_instance_ref
    if not bot_instance or not bot_instance.persona_config or not bot_instance.owner:
         logger.error(f"ChatBotInstance {chat_instance.id} for chat {chat_id} is missing linked BotInstance, PersonaConfig or Owner.")
         return None

    persona_config = bot_instance.persona_config
    owner_user = bot_instance.owner

    try:
        persona = Persona(persona_config, chat_instance)
    except ValueError as e:
         logger.error(f"Failed to initialize Persona for config {persona_config.id} in chat {chat_id}: {e}", exc_info=True)
         return None

    context_list = get_context_for_chat_bot(db, chat_instance.id)
    return persona, context_list, owner_user


async def send_to_langdock(system_prompt: str, messages: List[Dict[str, str]]) -> str:
    if not LANGDOCK_API_KEY:
        logger.error("LANGDOCK_API_KEY is not set.")
        return escape_markdown_v2("–æ—à–∏–±–∫–∞: –∫–ª—é—á api –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    headers = {
        "Authorization": f"Bearer {LANGDOCK_API_KEY}",
        "Content-Type": "application/json",
    }
    messages_to_send = messages[-MAX_CONTEXT_MESSAGES_SENT_TO_LLM:]
    payload = {
        "model": LANGDOCK_MODEL,
        "system": system_prompt,
        "messages": messages_to_send,
        "max_tokens": 1024,
        "temperature": 0.75,
        "top_p": 0.95,
        "stream": False
    }
    url = f"{LANGDOCK_BASE_URL.rstrip('/')}/v1/messages"
    logger.debug(f"Sending request to Langdock: {url} with {len(messages_to_send)} messages.")
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
             resp = await client.post(url, json=payload, headers=headers)
        logger.debug(f"Langdock response status: {resp.status_code}")
        resp.raise_for_status()
        data = resp.json()
        logger.debug(f"Langdock response data (first 200 chars): {str(data)[:200]}")

        full_response = ""
        if "content" in data and isinstance(data["content"], list):
            text_parts = [part.get("text", "") for part in data["content"] if part.get("type") == "text"]
            full_response = " ".join(text_parts)
        elif isinstance(data.get("content"), dict) and "text" in data["content"]:
            full_response = data["content"]["text"]
        elif "response" in data and isinstance(data["response"], str):
             full_response = data.get("response", "")
        elif "choices" in data and isinstance(data["choices"], list) and data["choices"]:
             choice = data["choices"][0]
             if "message" in choice and isinstance(choice["message"], dict) and "content" in choice["message"]:
                 full_response = choice["message"]["content"]
             elif "text" in choice:
                 full_response = choice["text"]

        if not full_response:
             logger.warning(f"Could not extract text from Langdock response structure: {data}")

        return full_response.strip()

    except httpx.ReadTimeout:
         logger.error("Langdock API request timed out.")
         return escape_markdown_v2("—Ö–º, –∫–∞–∂–µ—Ç—Å—è, —è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –¥—É–º–∞–ª... –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑?")
    except httpx.HTTPStatusError as e:
        logger.error(f"Langdock API HTTP error: {e.response.status_code} - {e.response.text}", exc_info=True)
        error_text = f"–æ–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å ai ({e.response.status_code})..."
        return escape_markdown_v2(error_text)
    except httpx.RequestError as e:
        logger.error(f"Langdock API request error: {e}", exc_info=True)
        return escape_markdown_v2("–Ω–µ –º–æ–≥—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å ai —Å–µ–π—á–∞—Å...")
    except Exception as e:
        logger.error(f"Unexpected error communicating with Langdock: {e}", exc_info=True)
        return escape_markdown_v2("–ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.")

async def process_and_send_response(update: Optional[Update], context: ContextTypes.DEFAULT_TYPE, chat_id: str, persona: Persona, full_bot_response_text: str, db: Session):
    if not full_bot_response_text or not full_bot_response_text.strip():
        logger.warning(f"Received empty response from AI for chat {chat_id}, persona {persona.name}. Not sending anything.")
        return
    logger.debug(f"Processing AI response for chat {chat_id}, persona {persona.name}. Raw length: {len(full_bot_response_text)}")

    # Add response to context first
    if persona.chat_instance:
        try:
            add_message_to_context(db, persona.chat_instance.id, "assistant", full_bot_response_text.strip())
            logger.debug("AI response added to database context (pending commit).")
        except SQLAlchemyError as e:
            logger.error(f"DB Error adding assistant response to context for chat_instance {persona.chat_instance.id}: {e}", exc_info=True)
            db.rollback()
            raise
        except Exception as e:
            logger.error(f"Unexpected Error adding assistant response to context for chat_instance {persona.chat_instance.id}: {e}", exc_info=True)
            raise
    else:
        logger.warning("Cannot add AI response to context, chat_instance is None.")


    all_text_content = full_bot_response_text.strip()
    gif_links = extract_gif_links(all_text_content)
    for gif in gif_links:
        all_text_content = re.sub(re.escape(gif), "", all_text_content, flags=re.IGNORECASE).strip()

    text_parts_to_send = postprocess_response(all_text_content)
    logger.debug(f"Postprocessed text into {len(text_parts_to_send)} parts.")

    max_messages = 3
    if persona.config and hasattr(persona.config, 'max_response_messages'):
         max_messages = persona.config.max_response_messages or 3


    if len(text_parts_to_send) > max_messages:
        logger.info(f"Limiting response parts from {len(text_parts_to_send)} to {max_messages} for persona {persona.name}")
        text_parts_to_send = text_parts_to_send[:max_messages]
        if text_parts_to_send:
             text_parts_to_send[-1] += escape_markdown_v2("...")

    for gif in gif_links:
        try:
            await context.bot.send_animation(chat_id=chat_id, animation=gif)
            logger.info(f"Sent gif: {gif}")
            await asyncio.sleep(random.uniform(0.5, 1.5))
        except Exception as e:
            logger.error(f"Error sending gif {gif} to chat {chat_id}: {e}", exc_info=True)

    if text_parts_to_send:
        chat_type = update.effective_chat.type if update and update.effective_chat else None
        for i, part in enumerate(text_parts_to_send):
            part = part.strip()
            if not part: continue
            if chat_type in ["group", "supergroup"]:
                try:
                    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
                    await asyncio.sleep(random.uniform(0.8, 1.5))
                except Exception as e:
                     logger.warning(f"Failed to send typing action to {chat_id}: {e}")
            try:
                 logger.debug(f"Sending part {i+1}/{len(text_parts_to_send)} to chat {chat_id}: '{part[:50]}...'")
                 # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                 escaped_part = escape_markdown_v2(part)
                 await context.bot.send_message(chat_id=chat_id, text=escaped_part)
            except BadRequest as e:
                 logger.error(f"Error sending ESCAPED text part {i+1} to {chat_id} (BadRequest): {e} - Original: '{part[:100]}...'")
                 break
            except Exception as e:
                 logger.error(f"Error sending text part {i+1} to {chat_id}: {e}", exc_info=True)
                 break

            if i < len(text_parts_to_send) - 1:
                await asyncio.sleep(random.uniform(0.4, 0.9))


async def send_limit_exceeded_message(update: Update, context: ContextTypes.DEFAULT_TYPE, user: User):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å Markdown
    text_raw = (
        f"—É–ø—Å! üòï –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π ({user.daily_message_count}/{user.message_limit}) –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.\n\n"
        f"‚ú® **—Ö–æ—á–µ—à—å –±–µ–∑–ª–∏–º–∏—Ç–∞?** ‚ú®\n"
        f"–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞ {SUBSCRIPTION_PRICE_RUB:.0f} {SUBSCRIPTION_CURRENCY}/–º–µ—Å –¥–∞–µ—Ç:\n"
        f"‚úÖ **{PAID_DAILY_MESSAGE_LIMIT}** —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n"
        f"‚úÖ –¥–æ **{PAID_PERSONA_LIMIT}** –ª–∏—á–Ω–æ—Å—Ç–µ–π\n"
        f"‚úÖ –ø–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π\n\n"
        "üëá –∂–º–∏ /subscribe –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
    )
    # –û—Å—Ç–∞–≤–ª—è–µ–º Markdown –∫–∞–∫ –µ—Å—Ç—å, —Ç.–∫. –æ–Ω –≤–∞–∂–µ–Ω
    text_to_send = text_raw

    keyboard = [[InlineKeyboardButton("üöÄ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!", callback_data="subscribe_info")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        target_chat_id = update.effective_chat.id if update.effective_chat else None
        if target_chat_id:
             await context.bot.send_message(target_chat_id, text_to_send, reply_markup=reply_markup)
        else:
             logger.warning(f"Could not send limit exceeded message to user {user.telegram_id}: no effective chat.")
    except BadRequest as e:
         logger.error(f"Failed sending limit message (BadRequest): {e} - Text: '{text_to_send[:100]}...'")
         try:
              if target_chat_id:
                  # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
                  plain_text = text_raw.replace("**", "").replace("`", "") # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–¥–∞—É–Ω
                  await context.bot.send_message(target_chat_id, plain_text, reply_markup=reply_markup, parse_mode=None)
         except Exception as final_e:
              logger.error(f"Failed sending limit message even plain: {final_e}")
    except Exception as e:
        logger.error(f"Failed to send limit exceeded message to user {user.telegram_id}: {e}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not (update.message.text or update.message.caption): return
    chat_id = str(update.effective_chat.id)
    user_id = update.effective_user.id
    username = update.effective_user.username or f"user_{user_id}"
    message_text = update.message.text or update.message.caption or ""
    logger.info(f"MSG < User {user_id} ({username}) in Chat {chat_id}: {message_text[:100]}")

    with next(get_db()) as db:
        try:
            persona_context_owner_tuple = get_persona_and_context_with_owner(chat_id, db)
            if not persona_context_owner_tuple:
                logger.debug(f"No active persona for chat {chat_id}. Ignoring.")
                return
            persona, _, owner_user = persona_context_owner_tuple
            logger.debug(f"Handling message for persona '{persona.name}' owned by {owner_user.id} ({owner_user.telegram_id})")

            if not check_and_update_user_limits(db, owner_user):
                logger.info(f"Owner {owner_user.telegram_id} exceeded daily message limit ({owner_user.daily_message_count}/{owner_user.message_limit}). Not responding or saving context.")
                await send_limit_exceeded_message(update, context, owner_user)
                db.commit() # Commit limit update if needed
                return

            # --- Add user message to context ---
            context_added = False
            if persona.chat_instance:
                try:
                    user_prefix = username
                    context_content = f"{user_prefix}: {message_text}"
                    add_message_to_context(db, persona.chat_instance.id, "user", context_content)
                    context_added = True
                    logger.debug("Added user message to context.")
                except SQLAlchemyError as e_ctx:
                    logger.error(f"DB Error adding user message to context: {e_ctx}", exc_info=True)
                    await update.message.reply_text(escape_markdown_v2("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."))
                    return
            else:
                logger.error("Cannot add user message to context, chat_instance is None.")
                await update.message.reply_text(escape_markdown_v2("—Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é."))
                return

            # --- Check if muted ---
            if persona.chat_instance and persona.chat_instance.is_muted:
                logger.debug(f"Persona '{persona.name}' is muted in chat {chat_id}. Message saved to context, but ignoring response.")
                db.commit()
                return

            # --- Handle potential mood change command ---
            available_moods = persona.get_all_mood_names()
            if message_text.lower() in map(str.lower, available_moods):
                 logger.info(f"Message '{message_text}' matched mood name. Changing mood.")
                 await mood(update, context, db=db, persona=persona)
                 return

            # --- Decide whether to respond (especially in groups) ---
            should_ai_respond = True
            if update.effective_chat.type in ["group", "supergroup"]:
                 if persona.should_respond_prompt_template:
                     should_respond_prompt = persona.format_should_respond_prompt(message_text)
                     if should_respond_prompt:
                         try:
                             logger.debug(f"Checking should_respond for persona {persona.name} in chat {chat_id}...")
                             context_for_should_respond = get_context_for_chat_bot(db, persona.chat_instance.id) if persona.chat_instance else []
                             decision_response = await send_to_langdock(
                                 system_prompt=should_respond_prompt,
                                 messages=context_for_should_respond
                             )
                             answer = decision_response.strip().lower() # –û—Ç–≤–µ—Ç –¥–∞/–Ω–µ—Ç –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
                             logger.debug(f"should_respond AI decision for '{message_text[:50]}...': '{answer}'")
                             if answer.startswith("–¥"):
                                 logger.info(f"Chat {chat_id}, Persona {persona.name}: Deciding to respond based on AI='{answer}'.")
                                 should_ai_respond = True
                             elif random.random() < 0.05:
                                 logger.info(f"Chat {chat_id}, Persona {persona.name}: Deciding to respond randomly despite AI='{answer}'.")
                                 should_ai_respond = True
                             else:
                                 logger.info(f"Chat {chat_id}, Persona {persona.name}: Deciding NOT to respond based on AI='{answer}'.")
                                 should_ai_respond = False
                         except Exception as e:
                              logger.error(f"Error in should_respond logic for chat {chat_id}, persona {persona.name}: {e}", exc_info=True)
                              logger.warning("Error in should_respond. Defaulting to respond.")
                              should_ai_respond = True
                     else:
                          logger.debug(f"No should_respond_prompt generated for persona {persona.name}. Defaulting to respond in group.")
                          should_ai_respond = True
                 else:
                     logger.debug(f"Persona {persona.name} has no should_respond template. Defaulting to respond in group.")
                     should_ai_respond = True

            if not should_ai_respond:
                 logger.debug(f"Decided not to respond based on should_respond logic for message: {message_text[:50]}...")
                 db.commit()
                 return

            # --- Get context for AI response generation ---
            context_for_ai = []
            if context_added and persona.chat_instance:
                try:
                    context_for_ai = get_context_for_chat_bot(db, persona.chat_instance.id)
                    logger.debug(f"Prepared {len(context_for_ai)} messages for AI context.")
                except SQLAlchemyError as e_ctx:
                     logger.error(f"DB Error getting context for AI response: {e_ctx}", exc_info=True)
                     await update.message.reply_text(escape_markdown_v2("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞."))
                     return
            elif not context_added:
                 logger.warning("Cannot generate AI response without updated context due to prior error.")
                 await update.message.reply_text(escape_markdown_v2("–æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º."))
                 return

            # --- Generate and send AI response ---
            system_prompt = persona.format_system_prompt(user_id, username, message_text)
            if not system_prompt:
                logger.error(f"System prompt formatting failed for persona {persona.name}. Cannot generate response.")
                await update.message.reply_text(escape_markdown_v2("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–≤–µ—Ç–∞."))
                db.commit()
                return

            logger.debug("Formatted main system prompt.")

            response_text = await send_to_langdock(system_prompt, context_for_ai)
            logger.debug(f"Received response from Langdock for main message: {response_text[:100]}...")

            await process_and_send_response(update, context, chat_id, persona, response_text, db)

            db.commit()
            logger.debug(f"Committed DB changes for handle_message cycle chat {chat_id}")

        except SQLAlchemyError as e:
             logger.error(f"Database error during handle_message: {e}", exc_info=True)
             await update.message.reply_text(escape_markdown_v2("–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
        except Exception as e:
            logger.error(f"General error processing message in chat {chat_id}: {e}", exc_info=True)
            await update.message.reply_text(escape_markdown_v2("–ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."))


async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE, media_type: str) -> None:
    if not update.message: return
    chat_id = str(update.effective_chat.id)
    user_id = update.effective_user.id
    username = update.effective_user.username or f"user_{user_id}"
    logger.info(f"Received {media_type} message from user {user_id} ({username}) in chat {chat_id}")

    with next(get_db()) as db:
        try:
            persona_context_owner_tuple = get_persona_and_context_with_owner(chat_id, db)
            if not persona_context_owner_tuple: return
            persona, _, owner_user = persona_context_owner_tuple
            logger.debug(f"Handling {media_type} for persona '{persona.name}' owned by {owner_user.id}")

            if not check_and_update_user_limits(db, owner_user):
                logger.info(f"Owner {owner_user.telegram_id} exceeded daily message limit for media. Not responding or saving context.")
                await send_limit_exceeded_message(update, context, owner_user)
                db.commit()
                return

            prompt_template = None
            context_text_placeholder = "" # –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —Ç.–∫. —ç—Ç–æ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∞ –Ω–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            system_formatter = None
            if media_type == "photo":
                prompt_template = persona.photo_prompt_template
                context_text_placeholder = "–ø—Ä–∏—Å–ª–∞–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é."
                system_formatter = persona.format_photo_prompt
            elif media_type == "voice":
                prompt_template = persona.voice_prompt_template
                context_text_placeholder = "–ø—Ä–∏—Å–ª–∞–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                system_formatter = persona.format_voice_prompt
            else:
                 logger.error(f"Unsupported media_type '{media_type}' in handle_media")
                 return

            # --- Add placeholder to context ---
            context_added = False
            if persona.chat_instance:
                try:
                    user_prefix = username
                    context_content = f"{user_prefix}: {context_text_placeholder}" # –ù–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    add_message_to_context(db, persona.chat_instance.id, "user", context_content)
                    context_added = True
                    logger.debug(f"Added media placeholder to context for {media_type}.")
                except SQLAlchemyError as e_ctx:
                     logger.error(f"DB Error adding media placeholder context: {e_ctx}", exc_info=True)
                     if update.effective_message: await update.effective_message.reply_text(escape_markdown_v2("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–∏–∞."))
                     return
            else:
                 logger.error("Cannot add media placeholder to context, chat_instance is None.")
                 if update.effective_message: await update.effective_message.reply_text(escape_markdown_v2("—Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å –º–µ–¥–∏–∞ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é."))
                 return

            # --- Check if muted ---
            if persona.chat_instance and persona.chat_instance.is_muted:
                logger.debug(f"Persona '{persona.name}' is muted in chat {chat_id}. Media saved to context, but ignoring response.")
                db.commit()
                return

            # --- Check if template exists ---
            if not prompt_template or not system_formatter:
                logger.info(f"Persona {persona.name} in chat {chat_id} has no {media_type} template. Skipping response generation.")
                db.commit()
                return

            # --- Get context for AI ---
            context_for_ai = []
            if context_added and persona.chat_instance:
                try:
                    context_for_ai = get_context_for_chat_bot(db, persona.chat_instance.id)
                    logger.debug(f"Prepared {len(context_for_ai)} messages for AI context for {media_type}.")
                except SQLAlchemyError as e_ctx:
                    logger.error(f"DB Error getting context for AI media response: {e_ctx}", exc_info=True)
                    if update.effective_message: await update.effective_message.reply_text(escape_markdown_v2("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –º–µ–¥–∏–∞."))
                    return
            elif not context_added:
                 logger.warning("Cannot generate AI media response without updated context.")
                 if update.effective_message: await update.effective_message.reply_text(escape_markdown_v2("–æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º."))
                 return

            # --- Format prompt and get response ---
            system_prompt = system_formatter()
            if not system_prompt:
                 logger.error(f"Failed to format {media_type} prompt for persona {persona.name}")
                 db.commit()
                 return

            logger.debug(f"Formatted {media_type} system prompt.")
            response_text = await send_to_langdock(system_prompt, context_for_ai)
            logger.debug(f"Received response from Langdock for {media_type}: {response_text[:100]}...")

            await process_and_send_response(update, context, chat_id, persona, response_text, db)

            db.commit()
            logger.debug(f"Committed DB changes for handle_media cycle chat {chat_id}")

        except SQLAlchemyError as e:
             logger.error(f"Database error during handle_media ({media_type}): {e}", exc_info=True)
             if update.effective_message: await update.effective_message.reply_text(escape_markdown_v2("–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."))
        except Exception as e:
            logger.error(f"General error processing {media_type} in chat {chat_id}: {e}", exc_info=True)
            if update.effective_message: await update.effective_message.reply_text(escape_markdown_v2("–ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."))


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message: return
    await handle_media(update, context, "photo")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message: return
    await handle_media(update, context, "voice")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message: return
    user_id = update.effective_user.id
    username = update.effective_user.username or f"id_{user_id}"
    chat_id = str(update.effective_chat.id)
    logger.info(f"CMD /start < User {user_id} ({username}) in Chat {chat_id}")
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    reply_text_raw = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞." # Default raw text
    escaped_reply_text = escape_markdown_v2(reply_text_raw) # Default escaped text
    try:
        with next(get_db()) as db:
            user = get_or_create_user(db, user_id, username)
            persona_info_tuple = get_persona_and_context_with_owner(chat_id, db)
            if persona_info_tuple:
                persona, _, _ = persona_info_tuple
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                reply_text_raw = (
                    f"–ø—Ä–∏–≤–µ—Ç! —è {persona.name}. —è —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n"
                    "–∏—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
                )
                escaped_reply_text = escape_markdown_v2(reply_text_raw)
            else:
                # Refresh user state
                db.refresh(user)
                now = datetime.now(timezone.utc)
                if not user.last_message_reset or user.last_message_reset.date() < now.date():
                    user.daily_message_count = 0
                    user.last_message_reset = now
                    db.commit() # Commit reset if needed
                    db.refresh(user)

                status = "‚≠ê Premium" if user.is_active_subscriber else "üÜì Free"
                expires_at_obj = user.subscription_expires_at
                escaped_expires_date = ""
                if expires_at_obj and isinstance(expires_at_obj, datetime):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
                    escaped_expires_date = escape_markdown_v2(expires_at_obj.strftime('%d.%m.%Y'))
                expires_text = f" –¥–æ {escaped_expires_date}" if user.is_active_subscriber and escaped_expires_date else ""

                persona_count = db.query(func.count(PersonaConfig.id)).filter(PersonaConfig.owner_id == user.id).scalar() or 0

                # –ê–∫–∫—É—Ä–∞—Ç–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º Markdown
                escaped_greeting = escape_markdown_v2("–ø—Ä–∏–≤–µ—Ç! üëã —è –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ai-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ (@NunuAiBot).\n\n")
                escaped_limits_info = escape_markdown_v2(f"–ª–∏—á–Ω–æ—Å—Ç–∏: {persona_count}/{user.persona_limit} | —Å–æ–æ–±—â–µ–Ω–∏—è: {user.daily_message_count}/{user.message_limit}\n\n")
                escaped_instruction1 = escape_markdown_v2(" - —Å–æ–∑–¥–∞–π ai-–ª–∏—á–Ω–æ—Å—Ç—å.\n")
                escaped_instruction2 = escape_markdown_v2(" - –ø–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–∏—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π –∏ —É–ø—Ä–∞–≤–ª—è–π –∏–º–∏.\n")
                escaped_commands_info = escape_markdown_v2(" - –¥–µ—Ç–∞–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ | ") + escape_markdown_v2(" - —É–∑–Ω–∞—Ç—å –æ –ø–æ–¥–ø–∏—Å–∫–µ\n") + escape_markdown_v2(" - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã")

                escaped_reply_text = (
                    escaped_greeting +
                    f"—Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å: **{status}**{expires_text}\n" +
                    escaped_limits_info +
                    "**–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:**\n" +
                    "1\\. `/createpersona <–∏–º—è>`" + escaped_instruction1 +
                    "2\\. `/mypersonas`" + escaped_instruction2 +
                    "`/profile`" + escaped_commands_info
                 )
                reply_text_raw = "—Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ (–Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–º–µ—Ç–∫—É)" # Placeholder

            await update.message.reply_text(escaped_reply_text, reply_markup=ReplyKeyboardRemove())

    except SQLAlchemyError as e:
        logger.error(f"Database error during /start for user {user_id}: {e}", exc_info=True)
        error_msg = "–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        await update.message.reply_text(escape_markdown_v2(error_msg))
    except NameError as ne:
        logger.error(f"NameError in /start handler for user {user_id}: {ne}", exc_info=True)
        error_msg = "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
        await update.message.reply_text(escape_markdown_v2(error_msg))
    except BadRequest as e:
        logger.error(f"BadRequest sending /start message for user {user_id}: {e}", exc_info=True)
        logger.error(f"Failed text (escaped): '{escaped_reply_text[:200]}...'")
        try:
            fallback_text = escape_markdown_v2("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
            await update.message.reply_text(fallback_text, reply_markup=ReplyKeyboardRemove())
        except Exception as fallback_e:
             logger.error(f"Failed sending fallback start message: {fallback_e}")
    except Exception as e:
        logger.error(f"Error in /start handler for user {user_id}: {e}", exc_info=True)
        error_msg = "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start."
        await update.message.reply_text(escape_markdown_v2(error_msg))


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
     if not update.message: return
     user_id = update.effective_user.id
     chat_id = str(update.effective_chat.id)
     logger.info(f"CMD /help < User {user_id} in Chat {chat_id}")
     await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
     # <<< –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string r"""...""" –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è >>>
     #    –¢–µ–ø–µ—Ä—å –±—ç–∫—Å–ª–µ—à–∏ \ –ø–µ—Ä–µ–¥ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏ Markdown V2 –ø–∏—à—É—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑.
     help_text = r"""
**ü§ñ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start \- –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å
/help \- —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/profile \- —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ª–∏–º–∏—Ç—ã
/subscribe \- –∏–Ω—Ñ–æ –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –æ–ø–ª–∞—Ç–∞

**üë§ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç—è–º–∏:**
/createpersona <–∏–º—è> \[–æ–ø–∏—Å–∞–Ω–∏–µ] \- —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
/mypersonas \- —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è \(—Ä–µ–¥–∞–∫—Ç\., —É–¥–∞–ª–∏—Ç—å, –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç\)
/editpersona <id> \- —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ ID
/deletepersona <id> \- —É–¥–∞–ª–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ ID

**üí¨ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç–µ \(–≥–¥–µ –µ—Å—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å\):**
/addbot <id> \- –¥–æ–±–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
/mood \[–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ] \- —Å–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
/reset \- –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å \(–∫–æ–Ω—Ç–µ–∫—Å—Ç\) –ª–∏—á–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
/mutebot \- –∑–∞—Å—Ç–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å –º–æ–ª—á–∞—Ç—å –≤ —á–∞—Ç–µ
/unmutebot \- —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—á–∞—Ç—å –≤ —á–∞—Ç–µ
     """
     try:
         await update.message.reply_text(help_text, reply_markup=ReplyKeyboardRemove())
     except BadRequest as e:
         logger.error(f"Failed sending help message (BadRequest): {e}", exc_info=True)
         try:
             # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º plain text –≤–µ—Ä—Å–∏—é, —É–±–∏—Ä–∞—è Markdown
             plain_help_text = re.sub(r'\\(.)', r'\1', help_text) # –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ TG
             plain_help_text = re.sub(r'\*\*(.*?)\*\*', r'\1', plain_help_text) # –£–±–∏—Ä–∞–µ–º **
             plain_help_text = re.sub(r'`(.*?)`', r'\1', plain_help_text) # –£–±–∏—Ä–∞–µ–º ``
             await update.message.reply_text(plain_help_text, reply_markup=ReplyKeyboardRemove(), parse_mode=None)
         except Exception as fallback_e:
             logger.error(f"Failed sending plain help message: {fallback_e}")


async def mood(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Optional[Session] = None, persona: Optional[Persona] = None) -> None:
    is_callback = update.callback_query is not None
    message_or_callback_msg = update.callback_query.message if is_callback else update.message
    if not message_or_callback_msg: return

    chat_id = str(message_or_callback_msg.chat.id)
    user = update.effective_user
    user_id = user.id
    username = user.username or f"id_{user_id}"
    logger.info(f"CMD /mood or Mood Action < User {user_id} ({username}) in Chat {chat_id}")

    close_db_later = False
    db_session = db
    chat_bot_instance = None
    local_persona = persona # Use passed persona if available

    # Default error messages (escaped)
    error_no_persona = escape_markdown_v2("–≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏.")
    error_persona_info = escape_markdown_v2("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—á–Ω–æ—Å—Ç–∏.")
    error_no_moods = escape_markdown_v2("—É –ª–∏—á–Ω–æ—Å—Ç–∏ '{persona_name}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.") # Placeholder needs filling later
    error_bot_muted = escape_markdown_v2("–õ–∏—á–Ω–æ—Å—Ç—å '{persona_name}' —Å–µ–π—á–∞—Å –∑–∞–≥–ª—É—à–µ–Ω–∞ (/unmutebot).") # Placeholder
    error_db = escape_markdown_v2("–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.")
    error_general = escape_markdown_v2("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /mood.")

    try:
        if db_session is None:
            db_context = get_db()
            db_session = next(db_context)
            close_db_later = True

        if local_persona is None:
            persona_info_tuple = get_persona_and_context_with_owner(chat_id, db_session)
            if not persona_info_tuple:
                try:
                    if is_callback: await update.callback_query.edit_message_text(error_no_persona)
                    else: await message_or_callback_msg.reply_text(error_no_persona, reply_markup=ReplyKeyboardRemove())
                except Exception as send_err: logger.error(f"Error sending 'no active persona' msg: {send_err}")
                logger.debug(f"No active persona for chat {chat_id}. Cannot set mood.")
                if close_db_later: db_session.close()
                return # Exit early
            local_persona, _, _ = persona_info_tuple

        if not local_persona or not local_persona.chat_instance:
             logger.error(f"Mood called, but persona or persona.chat_instance is None for chat {chat_id}.")
             if is_callback: await update.callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—á–Ω–æ—Å—Ç–∏.", show_alert=True) # Plain text
             else: await message_or_callback_msg.reply_text(error_persona_info)
             if close_db_later: db_session.close()
             return

        chat_bot_instance = local_persona.chat_instance

        if chat_bot_instance.is_muted:
            logger.debug(f"Persona '{local_persona.name}' is muted in chat {chat_id}. Ignoring mood command.")
            reply_text = escape_markdown_v2(f"–õ–∏—á–Ω–æ—Å—Ç—å '{local_persona.name}' —Å–µ–π—á–∞—Å –∑–∞–≥–ª—É—à–µ–Ω–∞ (/unmutebot).")
            try:
                 if is_callback: await update.callback_query.edit_message_text(reply_text)
                 else: await message_or_callback_msg.reply_text(reply_text, reply_markup=ReplyKeyboardRemove())
            except Exception as send_err: logger.error(f"Error sending 'bot muted' msg: {send_err}")
            if close_db_later: db_session.close()
            return

        available_moods = local_persona.get_all_mood_names()
        if not available_moods:
             reply_text = escape_markdown_v2(f"—É –ª–∏—á–Ω–æ—Å—Ç–∏ '{local_persona.name}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.")
             try:
                 if is_callback: await update.callback_query.edit_message_text(reply_text)
                 else: await message_or_callback_msg.reply_text(reply_text, reply_markup=ReplyKeyboardRemove())
             except Exception as send_err: logger.error(f"Error sending 'no moods defined' msg: {send_err}")
             logger.warning(f"Persona {local_persona.name} has no moods defined.")
             if close_db_later: db_session.close()
             return

        available_moods_lower = {m.lower(): m for m in available_moods}
        mood_arg_lower = None
        target_mood_original_case = None

        # Determine the target mood
        if is_callback and update.callback_query.data.startswith("set_mood_"):
             parts = update.callback_query.data.split('_')
             if len(parts) >= 3:
                  mood_arg_lower = "_".join(parts[2:-1]).lower()
                  if mood_arg_lower in available_moods_lower:
                      target_mood_original_case = available_moods_lower[mood_arg_lower]
             else:
                  logger.warning(f"Invalid mood callback data format: {update.callback_query.data}")
        elif not is_callback:
            mood_text = ""
            if context.args:
                 mood_text = " ".join(context.args)
            elif update.message and update.message.text:
                 possible_mood = update.message.text.strip()
                 if possible_mood.lower() in available_moods_lower:
                      mood_text = possible_mood

            if mood_text:
                mood_arg_lower = mood_text.lower()
                if mood_arg_lower in available_moods_lower:
                    target_mood_original_case = available_moods_lower[mood_arg_lower]


        # Process the mood change or show keyboard
        if target_mood_original_case:
             set_mood_for_chat_bot(db_session, chat_bot_instance.id, target_mood_original_case)
             reply_text = f"–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–ª—è '{escape_markdown_v2(local_persona.name)}' —Ç–µ–ø–µ—Ä—å: **{escape_markdown_v2(target_mood_original_case)}**"
             try:
                 if is_callback:
                     if update.callback_query.message.text != reply_text:
                         await update.callback_query.edit_message_text(reply_text)
                     else:
                         await update.callback_query.answer(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {target_mood_original_case}") # Plain text
                 else:
                     await message_or_callback_msg.reply_text(reply_text, reply_markup=ReplyKeyboardRemove())
             except Exception as send_err: logger.error(f"Error sending mood confirmation: {send_err}")
             logger.info(f"Mood for persona {local_persona.name} in chat {chat_id} set to {target_mood_original_case}.")
        else:
             # Show keyboard
             keyboard = [[InlineKeyboardButton(m.capitalize(), callback_data=f"set_mood_{m}_{local_persona.id}")] for m in available_moods]
             reply_markup = InlineKeyboardMarkup(keyboard)
             current_mood_text = get_mood_for_chat_bot(db_session, chat_bot_instance.id)

             if mood_arg_lower:
                 reply_text = escape_markdown_v2(f"–Ω–µ –∑–Ω–∞—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è '{mood_arg_lower}' –¥–ª—è '{local_persona.name}'. –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:")
                 logger.debug(f"Invalid mood argument '{mood_arg_lower}' for chat {chat_id}. Sent mood selection.")
             else:
                 reply_text = f"—Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: **{escape_markdown_v2(current_mood_text)}**\\. –≤—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –¥–ª—è '{escape_markdown_v2(local_persona.name)}':"
                 logger.debug(f"Sent mood selection keyboard for chat {chat_id}.")

             try:
                 if is_callback:
                      query = update.callback_query
                      if query.message.text != reply_text or query.message.reply_markup != reply_markup:
                           await query.edit_message_text(reply_text, reply_markup=reply_markup)
                      else:
                           await query.answer()
                 else:
                      await message_or_callback_msg.reply_text(reply_text, reply_markup=reply_markup)
             except Exception as send_err: logger.error(f"Error sending mood selection: {send_err}")

    except SQLAlchemyError as e:
         logger.error(f"Database error during /mood for chat {chat_id}: {e}", exc_info=True)
         try:
             if is_callback: await update.callback_query.edit_message_text(error_db)
             else: await message_or_callback_msg.reply_text(error_db, reply_markup=ReplyKeyboardRemove())
         except Exception as send_err: logger.error(f"Error sending DB error msg: {send_err}")
    except Exception as e:
         logger.error(f"Error in /mood handler for chat {chat_id}: {e}", exc_info=True)
         try:
             if is_callback: await update.callback_query.edit_message_text(error_general)
             else: await message_or_callback_msg.reply_text(error_general, reply_markup=ReplyKeyboardRemove())
         except Exception as send_err: logger.error(f"Error sending general error msg: {send_err}")
    finally:
        if close_db_later and db_session:
            db_session.close()


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message: return
    chat_id = str(update.effective_chat.id)
    user_id = update.effective_user.id
    username = update.effective_user.username or f"id_{user_id}"
    logger.info(f"CMD /reset < User {user_id} ({username}) in Chat {chat_id}")
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    # Default error/info messages (escaped)
    error_no_persona = escape_markdown_v2("–≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞.")
    error_not_owner = escape_markdown_v2("—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ª–∏—á–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –µ—ë –ø–∞–º—è—Ç—å.")
    error_no_instance = escape_markdown_v2("–æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞.")
    error_db = escape_markdown_v2("–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
    error_general = escape_markdown_v2("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
    success_reset = escape_markdown_v2("–ø–∞–º—è—Ç—å –ª–∏—á–Ω–æ—Å—Ç–∏ '{persona_name}' –≤ —ç—Ç–æ–º —á–∞—Ç–µ –æ—á–∏—â–µ–Ω–∞.") # Placeholder

    with next(get_db()) as db:
        try:
            persona_info_tuple = get_persona_and_context_with_owner(chat_id, db)
            if not persona_info_tuple:
                await update.message.reply_text(error_no_persona, reply_markup=ReplyKeyboardRemove())
                return
            persona, _, owner_user = persona_info_tuple
            if owner_user.telegram_id != user_id and not is_admin(user_id):
                logger.warning(f"User {user_id} attempted to reset persona '{persona.name}' owned by {owner_user.telegram_id} in chat {chat_id}.")
                await update.message.reply_text(error_not_owner, reply_markup=ReplyKeyboardRemove())
                return

            chat_bot_instance = persona.chat_instance
            if not chat_bot_instance:
                 logger.error(f"Reset command: ChatBotInstance not found for persona {persona.name} in chat {chat_id}")
                 await update.message.reply_text(error_no_instance)
                 return

            deleted_count = db.query(ChatContext).filter(ChatContext.chat_bot_instance_id == chat_bot_instance.id).delete(synchronize_session='fetch')
            db.commit()
            logger.info(f"Deleted {deleted_count} context messages for chat_bot_instance {chat_bot_instance.id} (Persona '{persona.name}') in chat {chat_id} by user {user_id}.")
            final_success_msg = escape_markdown_v2(f"–ø–∞–º—è—Ç—å –ª–∏—á–Ω–æ—Å—Ç–∏ '{persona.name}' –≤ —ç—Ç–æ–º —á–∞—Ç–µ –æ—á–∏—â–µ–Ω–∞.")
            await update.message.reply_text(final_success_msg, reply_markup=ReplyKeyboardRemove())
        except SQLAlchemyError as e:
            logger.error(f"Database error during /reset for chat {chat_id}: {e}", exc_info=True)
            await update.message.reply_text(error_db)
        except Exception as e:
            logger.error(f"Error in /reset handler for chat {chat_id}: {e}", exc_info=True)
            await update.message.reply_text(error_general)


async def create_persona(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message: return
    user_id = update.effective_user.id
    username = update.effective_user.username or f"id_{user_id}"
    chat_id = str(update.effective_chat.id)
    logger.info(f"CMD /createpersona < User {user_id} ({username}) with args: {context.args}")
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string –¥–ª—è usage_text
    usage_text = r"—Ñ–æ—Ä–º–∞—Ç: `/createpersona <–∏–º—è> \[–æ–ø–∏—Å–∞–Ω–∏–µ]`\n_–∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ—Ç\._"
    error_name_len = escape_markdown_v2("–∏–º—è –ª–∏—á–Ω–æ—Å—Ç–∏: 2-50 —Å–∏–º–≤–æ–ª–æ–≤.")
    error_desc_len = escape_markdown_v2("–æ–ø–∏—Å–∞–Ω–∏–µ: –¥–æ 1500 —Å–∏–º–≤–æ–ª–æ–≤.")
    # –û—Å—Ç–∞–≤–ª—è–µ–º ** –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ –ª–∏–º–∏—Ç–µ, –Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    error_limit_reached = escape_markdown_v2("—É–ø—Å\\! –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ª–∏—á–Ω–æ—Å—Ç–µ–π \\({current_count}/{limit}\\) –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ") + "**{status_text}**" + escape_markdown_v2("\\. üòü\n—á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª—å—à–µ, –∏—Å–ø–æ–ª—å–∑—É–π /subscribe") # Placeholder
    error_name_exists = escape_markdown_v2("–ª–∏—á–Ω–æ—Å—Ç—å —Å –∏–º–µ–Ω–µ–º '{persona_name}' —É–∂–µ –µ—Å—Ç—å. –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ.") # Placeholder
    error_db = escape_markdown_v2("–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏.")
    error_general = escape_markdown_v2("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏.")
    # –û—Å—Ç–∞–≤–ª—è–µ–º `id` –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± —É—Å–ø–µ—Ö–µ
    success_create = escape_markdown_v2("‚úÖ –ª–∏—á–Ω–æ—Å—Ç—å '{name}' —Å–æ–∑–¥–∞–Ω–∞!\nid: ") + "`{id}`" + escape_markdown_v2("\n–æ–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n–¥–æ–±–∞–≤—å –≤ —á–∞—Ç –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è–π —á–µ—Ä–µ–∑ /mypersonas") # Placeholder

    args = context.args
    if not args:
        await update.message.reply_text(usage_text)
        return
    persona_name = args[0]
    persona_description = " ".join(args[1:]) if len(args) > 1 else None
    if len(persona_name) < 2 or len(persona_name) > 50:
         await update.message.reply_text(error_name_len, reply_markup=ReplyKeyboardRemove())
         return
    if persona_description and len(persona_description) > 1500:
         await update.message.reply_text(error_desc_len, reply_markup=ReplyKeyboardRemove())
         return

    with next(get_db()) as db:
        try:
            user = get_or_create_user(db, user_id, username)
            user_for_check = db.query(User).options(joinedload(User.persona_configs)).filter(User.id == user.id).one()

            if not user_for_check.can_create_persona:
                 current_count = len(user_for_check.persona_configs)
                 limit = user_for_check.persona_limit
                 logger.warning(f"User {user_id} cannot create persona, limit reached ({current_count}/{limit}).")
                 status_text = "‚≠ê Premium" if user_for_check.is_active_subscriber else "üÜì Free"
                 # Format string carefully preserving **
                 final_limit_msg = escape_markdown_v2(f"—É–ø—Å\\! –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ª–∏—á–Ω–æ—Å—Ç–µ–π \\({current_count}/{limit}\\) –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ") + f"**{escape_markdown_v2(status_text)}**" + escape_markdown_v2("\\. üòü\n—á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª—å—à–µ, –∏—Å–ø–æ–ª—å–∑—É–π /subscribe")
                 await update.message.reply_text(final_limit_msg, reply_markup=ReplyKeyboardRemove())
                 return

            existing_persona = get_persona_by_name_and_owner(db, user.id, persona_name)
            if existing_persona:
                 final_exists_msg = error_name_exists.format(persona_name=escape_markdown_v2(persona_name))
                 await update.message.reply_text(final_exists_msg, reply_markup=ReplyKeyboardRemove())
                 return

            new_persona = create_persona_config(db, user.id, persona_name, persona_description)
            desc_display = escape_markdown_v2(new_persona.description) if new_persona.description else escape_markdown_v2("(–ø—É—Å—Ç–æ)")
            # Format string carefully preserving `id`
            final_success_msg = escape_markdown_v2(f"‚úÖ –ª–∏—á–Ω–æ—Å—Ç—å '{new_persona.name}' —Å–æ–∑–¥–∞–Ω–∞!\nid: ") + f"`{new_persona.id}`" + escape_markdown_v2(f"\n–æ–ø–∏—Å–∞–Ω–∏–µ: {desc_display}\n\n–¥–æ–±–∞–≤—å –≤ —á–∞—Ç –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è–π —á–µ—Ä–µ–∑ /mypersonas")
            await update.message.reply_text(final_success_msg)
            logger.info(f"User {user_id} created persona: '{new_persona.name}' (ID: {new_persona.id})")

        except IntegrityError:
             logger.warning(f"IntegrityError caught by handler for create_persona user {user_id} name '{persona_name}'.")
             error_msg_ie = escape_markdown_v2(f"–æ—à–∏–±–∫–∞: –ª–∏—á–Ω–æ—Å—Ç—å '{persona_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –≥–æ–Ω–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤). –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
             await update.message.reply_text(error_msg_ie, reply_markup=ReplyKeyboardRemove())
        except SQLAlchemyError as e:
             logger.error(f"SQLAlchemyError caught by handler for create_persona user {user_id}: {e}", exc_info=True)
             await update.message.reply_text(error_db)
        except Exception as e:
             logger.error(f"Error creating persona for user {user_id}: {e}", exc_info=True)
             await update.message.reply_text(error_general)


async def my_personas(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message: return
    user_id = update.effective_user.id
    username = update.effective_user.username or f"id_{user_id}"
    chat_id = str(update.effective_chat.id)
    logger.info(f"CMD /mypersonas < User {user_id} ({username}) in Chat {chat_id}")
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    error_db = escape_markdown_v2("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–µ–π.")
    error_general = escape_markdown_v2("–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /mypersonas.")
    error_user_not_found = escape_markdown_v2("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string –¥–ª—è info_no_personas
    info_no_personas = r"—É —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ª–∏—á–Ω–æ—Å—Ç–µ–π \(–ª–∏–º–∏—Ç: {count}/{limit}\)\.\n—Å–æ–∑–¥–∞–π: /createpersona <–∏–º—è>" # Placeholder
    info_list_header = escape_markdown_v2("—Ç–≤–æ–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ ({count}/{limit}):\n") # Placeholder

    try:
        with next(get_db()) as db:
            user = get_or_create_user(db, user_id, username)
            user_with_personas = db.query(User).options(joinedload(User.persona_configs)).filter(User.id == user.id).first()

            if not user_with_personas:
                logger.error(f"User {user_id} not found after get_or_create in my_personas.")
                await update.message.reply_text(error_user_not_found)
                return

            personas = sorted(user_with_personas.persona_configs, key=lambda p: p.name) if user_with_personas.persona_configs else []
            persona_limit = user_with_personas.persona_limit
            persona_count = len(personas)

            if not personas:
                final_no_personas_msg = info_no_personas.format(count=persona_count, limit=persona_limit)
                await update.message.reply_text(final_no_personas_msg)
                return

            text = info_list_header.format(count=persona_count, limit=persona_limit)
            keyboard = []
            for p in personas:
                 # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                 button_text = f"üë§ {p.name} (ID: {p.id})"
                 keyboard.append([InlineKeyboardButton(button_text, callback_data=f"dummy_{p.id}")])
                 keyboard.append([
                     InlineKeyboardButton("‚öôÔ∏è –†–µ–¥–∞–∫—Ç.", callback_data=f"edit_persona_{p.id}"),
                     InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_persona_{p.id}"),
                     InlineKeyboardButton("‚ûï –í —á–∞—Ç", callback_data=f"add_bot_{p.id}")
                 ])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(text, reply_markup=reply_markup)
            logger.info(f"User {user_id} requested mypersonas. Sent {persona_count} personas with action buttons.")
    except SQLAlchemyError as e:
        logger.error(f"Database error during /mypersonas for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text(error_db)
    except Exception as e:
        logger.error(f"Error in /mypersonas handler for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text(error_general)


async def add_bot_to_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, persona_id: Optional[int] = None) -> None:
    is_callback = update.callback_query is not None
    message_or_callback_msg = update.callback_query.message if is_callback else update.message
    if not message_or_callback_msg: return

    user_id = update.effective_user.id
    username = update.effective_user.username or f"id_{user_id}"
    chat_id = str(message_or_callback_msg.chat.id)
    chat_title = message_or_callback_msg.chat.title or f"Chat {chat_id}"
    local_persona_id = persona_id # Use passed ID if available

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string –¥–ª—è usage_text
    usage_text = r"—Ñ–æ—Ä–º–∞—Ç: `/addbot <id –ø–µ—Ä—Å–æ–Ω—ã>`\n–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É '‚ûï –í —á–∞—Ç' –∏–∑ /mypersonas"
    error_invalid_id_callback = escape_markdown_v2("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ª–∏—á–Ω–æ—Å—Ç–∏.")
    error_invalid_id_cmd = escape_markdown_v2("id –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    error_no_id = escape_markdown_v2("–û—à–∏–±–∫–∞: ID –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
    error_persona_not_found = escape_markdown_v2("–ª–∏—á–Ω–æ—Å—Ç—å —Å id `{id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Ç–≤–æ—è.") # Placeholder
    error_already_active = escape_markdown_v2("–ª–∏—á–Ω–æ—Å—Ç—å '{name}' —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.") # Placeholder
    error_link_failed = escape_markdown_v2("–Ω–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å (–æ—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è).")
    error_integrity = escape_markdown_v2("–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    error_db = escape_markdown_v2("–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞.")
    error_general = escape_markdown_v2("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏.")
    # –û—Å—Ç–∞–≤–ª—è–µ–º `id` –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤ success_added
    success_added = escape_markdown_v2("‚úÖ –ª–∏—á–Ω–æ—Å—Ç—å '{name}' (id: ") + "`{id}`" + escape_markdown_v2(") –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ! –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞.") # Placeholder

    if is_callback and local_persona_id is None:
         try:
             local_persona_id = int(update.callback_query.data.split('_')[-1])
         except (IndexError, ValueError):
             logger.error(f"Could not parse persona_id from add_bot callback data: {update.callback_query.data}")
             await update.callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ª–∏—á–Ω–æ—Å—Ç–∏.", show_alert=True) # Plain text
             return
    elif not is_callback:
         logger.info(f"CMD /addbot < User {user_id} ({username}) in Chat '{chat_title}' ({chat_id}) with args: {context.args}")
         args = context.args
         if not args or len(args) != 1 or not args[0].isdigit():
             await message_or_callback_msg.reply_text(usage_text)
             return
         try:
             local_persona_id = int(args[0])
         except ValueError:
             await message_or_callback_msg.reply_text(error_invalid_id_cmd, reply_markup=ReplyKeyboardRemove())
             return

    if local_persona_id is None:
         logger.error("add_bot_to_chat: persona_id is None after processing input.")
         if is_callback: await update.callback_query.answer("–û—à–∏–±–∫–∞: ID –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.", show_alert=True) # Plain text
         else: await message_or_callback_msg.reply_text(error_no_id)
         return

    if is_callback:
        await update.callback_query.answer("–î–æ–±–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ—Å—Ç—å...") # Plain text

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    with next(get_db()) as db:
        try:
            persona = get_persona_by_id_and_owner(db, user_id, local_persona_id)
            if not persona:
                 final_not_found_msg = error_persona_not_found.format(id=local_persona_id)
                 if is_callback: await update.callback_query.edit_message_text(final_not_found_msg)
                 else: await message_or_callback_msg.reply_text(final_not_found_msg, reply_markup=ReplyKeyboardRemove())
                 return

            # Deactivate any existing active bot in this chat first
            existing_active_link = db.query(ChatBotInstance).filter(
                 ChatBotInstance.chat_id == chat_id,
                 ChatBotInstance.active == True
            ).options(
                joinedload(ChatBotInstance.bot_instance_ref)
            ).first()

            if existing_active_link:
                if existing_active_link.bot_instance_ref and existing_active_link.bot_instance_ref.persona_config_id == local_persona_id:
                    final_already_active_msg = error_already_active.format(name=escape_markdown_v2(persona.name))
                    if is_callback: await update.callback_query.answer(f"–ª–∏—á–Ω–æ—Å—Ç—å '{persona.name}' —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True) # Plain text answer
                    else: await message_or_callback_msg.reply_text(final_already_active_msg, reply_markup=ReplyKeyboardRemove())
                    return
                else:
                    logger.info(f"Deactivating previous bot instance {existing_active_link.bot_instance_id} in chat {chat_id} before activating {local_persona_id}.")
                    existing_active_link.active = False
                    db.flush()

            # Find or create BotInstance
            user = get_or_create_user(db, user_id, username)
            bot_instance = db.query(BotInstance).filter(
                BotInstance.persona_config_id == local_persona_id
            ).first()

            if not bot_instance:
                 bot_instance = create_bot_instance(db, user.id, local_persona_id, name=f"Inst:{persona.name}")
                 logger.info(f"Created BotInstance {bot_instance.id} for persona {local_persona_id}")

            # Link the BotInstance to the chat
            chat_link = link_bot_instance_to_chat(db, bot_instance.id, chat_id)

            if chat_link:
                 deleted_ctx = db.query(ChatContext).filter(ChatContext.chat_bot_instance_id == chat_link.id).delete(synchronize_session='fetch')
                 db.commit()
                 logger.debug(f"Cleared {deleted_ctx} context messages for chat_bot_instance {chat_link.id} upon linking.")
                 final_success_msg = success_added.format(name=escape_markdown_v2(persona.name), id=local_persona_id)
                 await context.bot.send_message(chat_id=chat_id, text=final_success_msg, reply_markup=ReplyKeyboardRemove())
                 if is_callback:
                      try:
                           await update.callback_query.delete_message()
                      except Exception as del_err:
                           logger.warning(f"Could not delete callback message after adding bot: {del_err}")
                 logger.info(f"Linked BotInstance {bot_instance.id} (Persona {local_persona_id}) to chat {chat_id} ('{chat_title}'). ChatBotInstance ID: {chat_link.id}")
            else:
                 if is_callback:
                      await context.bot.send_message(chat_id=chat_id, text=error_link_failed)
                 else:
                      await message_or_callback_msg.reply_text(error_link_failed, reply_markup=ReplyKeyboardRemove())
                 logger.warning(f"Failed to link BotInstance {bot_instance.id} to chat {chat_id} - link_bot_instance_to_chat returned None.")

        except IntegrityError as e:
             logger.warning(f"IntegrityError potentially during addbot for persona {local_persona_id} to chat {chat_id}: {e}", exc_info=True)
             await context.bot.send_message(chat_id=chat_id, text=error_integrity)
        except SQLAlchemyError as e:
             logger.error(f"Database error during /addbot for persona {local_persona_id} to chat {chat_id}: {e}", exc_info=True)
             await context.bot.send_message(chat_id=chat_id, text=error_db)
        except Exception as e:
             logger.error(f"Error adding bot instance {local_persona_id} to chat {chat_id}: {e}", exc_info=True)
             await context.bot.send_message(chat_id=chat_id, text=error_general)


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query or not query.data: return

    chat_id = str(query.message.chat.id) if query.message else "Unknown Chat"
    user_id = query.from_user.id
    username = query.from_user.username or f"id_{user_id}"
    data = query.data
    logger.info(f"CALLBACK < User {user_id} ({username}) in Chat {chat_id} data: {data}")

    # --- Route callbacks ---
    if data.startswith("set_mood_"):
        await query.answer()
        await mood(update, context)
    elif data == "subscribe_info":
        await query.answer()
        await subscribe(update, context, from_callback=True)
    elif data == "subscribe_pay":
        await query.answer("–°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É...") # Plain text
        await generate_payment_link(update, context)
    elif data == "view_tos":
        await query.answer()
        await view_tos(update, context)
    elif data == "confirm_pay":
        await query.answer()
        await confirm_pay(update, context)
    elif data.startswith("add_bot_"):
        await add_bot_to_chat(update, context)
    elif data.startswith("dummy_"):
        await query.answer()
    else:
        known_conv_prefixes = ("edit_persona_", "delete_persona_", "edit_field_", "edit_mood", "deletemood", "cancel_edit", "edit_persona_back")
        if any(data.startswith(p) for p in known_conv_prefixes):
             logger.debug(f"Callback '{data}' seems to be for a ConversationHandler, skipping direct handling.")
        else:
            logger.warning(f"Unhandled callback query data: {data} from user {user_id}")
            try:
                 await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ") # Plain text
            except Exception as e:
                 logger.warning(f"Failed to answer unhandled callback {query.id}: {e}")


async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message: return
    user_id = update.effective_user.id
    username = update.effective_user.username or f"id_{user_id}"
    logger.info(f"CMD /profile < User {user_id} ({username})")
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)

    error_db = escape_markdown_v2("–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")
    error_general = escape_markdown_v2("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /profile.")

    with next(get_db()) as db:
        try:
            user = get_or_create_user(db, user_id, username)

            # Ensure limits are up-to-date
            now = datetime.now(timezone.utc)
            if not user.last_message_reset or user.last_message_reset.date() < now.date():
                logger.info(f"Resetting daily limit for user {user_id} during /profile check.")
                user.daily_message_count = 0
                user.last_message_reset = now
                db.commit()
                db.refresh(user)

            is_active_subscriber = user.is_active_subscriber
            status = "‚≠ê Premium" if is_active_subscriber else "üÜì Free"
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            expires_text_raw = f"–∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_expires_at.strftime('%d.%m.%Y %H:%M')} UTC" if is_active_subscriber and user.subscription_expires_at else "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
            expires_text = escape_markdown_v2(expires_text_raw)

            persona_count = db.query(func.count(PersonaConfig.id)).filter(PersonaConfig.owner_id == user.id).scalar() or 0

            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å ** –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏
            text = (
                f"üë§ **—Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
                f"—Å—Ç–∞—Ç—É—Å: **{status}**\n"
                f"{expires_text}\n\n"
                f"**–ª–∏–º–∏—Ç—ã:**\n"
                f"{escape_markdown_v2(f'—Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è: {user.daily_message_count}/{user.message_limit}')}\n"
                f"{escape_markdown_v2(f'—Å–æ–∑–¥–∞–Ω–æ –ª–∏—á–Ω–æ—Å—Ç–µ–π: {persona_count}/{user.persona_limit}')}\n\n"
            )
            if not is_active_subscriber:
                text += escape_markdown_v2("üöÄ —Ö–æ—á–µ—à—å –±–æ–ª—å—à–µ? –∂–º–∏ /subscribe !")

            await update.message.reply_text(text)
        except SQLAlchemyError as e:
             logger.error(f"Database error during /profile for user {user_id}: {e}", exc_info=True)
             await update.message.reply_text(error_db)
        except Exception as e:
            logger.error(f"Error in /profile handler for user {user_id}: {e}", exc_info=True)
            await update.message.reply_text(error_general)


async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE, from_callback: bool = False) -> None:
    user = update.effective_user
    user_id = user.id
    username = user.username or f"id_{user_id}"
    logger.info(f"CMD /subscribe or Info Callback < User {user_id} ({username})")

    message_to_update_or_reply = update.callback_query.message if from_callback else update.message
    if not message_to_update_or_reply: return

    yookassa_ready = bool(YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY and YOOKASSA_SHOP_ID.isdigit())

    error_payment_unavailable = escape_markdown_v2("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. üò• (–ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)")
    text_raw = "–¢–µ–∫—Å—Ç –¥–ª—è /subscribe" # Placeholder

    if not yookassa_ready:
        text = error_payment_unavailable
        reply_markup = None
        logger.warning("Yookassa credentials not set or shop ID is not numeric in subscribe handler.")
    else:
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å ** –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏
        header = f"‚ú® **–ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ ({SUBSCRIPTION_PRICE_RUB:.0f} {SUBSCRIPTION_CURRENCY}/–º–µ—Å)** ‚ú®\n\n"
        # –û—Å—Ç–∞–≤–ª—è–µ–º ** –≤ body –¥–ª—è –ª–∏–º–∏—Ç–æ–≤, —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        body = escape_markdown_v2("–ø–æ–ª—É—á–∏ –º–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\n‚úÖ ") + f"**{PAID_DAILY_MESSAGE_LIMIT}**" + escape_markdown_v2(f" —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å \\(–≤–º–µ—Å—Ç–æ {FREE_DAILY_MESSAGE_LIMIT}\\)\n‚úÖ ") + f"**{PAID_PERSONA_LIMIT}**" + escape_markdown_v2(f" –ª–∏—á–Ω–æ—Å—Ç–µ–π \\(–≤–º–µ—Å—Ç–æ {FREE_PERSONA_LIMIT}\\)\n‚úÖ –ø–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤\n‚úÖ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç\\. —Å–≤–æ–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π\n‚úÖ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ \\(–µ—Å–ª–∏ –±—É–¥–µ—Ç\\)\n\n–ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç {SUBSCRIPTION_DURATION_DAYS} –¥–Ω–µ–π\\.")
        text = header + body
        text_raw = "—Ç–µ–∫—Å—Ç /subscribe (–Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)" # Placeholder –¥–ª—è –ª–æ–≥–∞

        keyboard = [
            [InlineKeyboardButton("üìú –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data="view_tos")],
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="confirm_pay")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        if from_callback:
            query = update.callback_query
            if query.message.text != text or query.message.reply_markup != reply_markup:
                 await query.edit_message_text(text, reply_markup=reply_markup)
            else:
                 await query.answer()
        else:
            await message_to_update_or_reply.reply_text(text, reply_markup=reply_markup)
    except BadRequest as e:
        logger.error(f"Failed sending subscribe message (BadRequest): {e} - Text Raw: '{text_raw[:100]}...'")
        try:
            if message_to_update_or_reply:
                 plain_text = text_raw.replace("**", "").replace("`", "") # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–¥–∞—É–Ω
                 await context.bot.send_message(chat_id=message_to_update_or_reply.chat.id, text=plain_text, reply_markup=reply_markup, parse_mode=None)
        except Exception as fallback_e:
             logger.error(f"Failed sending fallback subscribe message: {fallback_e}")
    except Exception as e:
        logger.error(f"Failed to send/edit subscribe message for user {user_id}: {e}")
        if from_callback:
            try:
                await context.bot.send_message(chat_id=message_to_update_or_reply.chat.id, text=text, reply_markup=reply_markup)
            except Exception as send_e:
                 logger.error(f"Failed to send fallback subscribe message for user {user_id}: {send_e}")


async def view_tos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query or not query.message: return
    user_id = query.from_user.id
    logger.info(f"User {user_id} requested to view ToS.")

    tos_url = context.bot_data.get('tos_url')
    error_tos_link = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ." # Plain text for answer
    error_tos_load = escape_markdown_v2("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    info_tos = escape_markdown_v2("–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –°–æ–≥–ª–∞—à–µ–Ω–∏–µ–º, –æ—Ç–∫—Ä—ã–≤ –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:")

    if tos_url:
        keyboard = [
            [InlineKeyboardButton("üìú –û—Ç–∫—Ä—ã—Ç—å –°–æ–≥–ª–∞—à–µ–Ω–∏–µ", url=tos_url)],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="subscribe_info")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = info_tos
        try:
            if query.message.text != text or query.message.reply_markup != reply_markup:
                await query.edit_message_text(text, reply_markup=reply_markup)
            else:
                 await query.answer()
        except Exception as e:
            logger.error(f"Failed to show ToS link to user {user_id}: {e}")
            await query.answer(error_tos_link, show_alert=True)
    else:
        logger.error(f"ToS URL not found in bot_data for user {user_id}.")
        text = error_tos_load
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="subscribe_info")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            if query.message.text != text or query.message.reply_markup != reply_markup:
                await query.edit_message_text(text, reply_markup=reply_markup)
            else:
                await query.answer()
        except Exception as e:
             logger.error(f"Failed to show ToS error message to user {user_id}: {e}")
             await query.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.", show_alert=True) # Plain text


async def confirm_pay(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query or not query.message: return
    user_id = query.from_user.id
    logger.info(f"User {user_id} confirmed ToS agreement, proceeding to payment button.")

    tos_url = context.bot_data.get('tos_url')
    yookassa_ready = bool(YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY and YOOKASSA_SHOP_ID.isdigit())

    error_payment_unavailable = escape_markdown_v2("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. üò• (–ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)")
    info_confirm = escape_markdown_v2(
         "‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n\n"
         "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –Ω–∏–∂–µ, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–Ω—ã —Å "
         "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –°–æ–≥–ª–∞—à–µ–Ω–∏–µ–º."
         "\n\nüëá"
    )

    if not yookassa_ready:
        text = error_payment_unavailable
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="subscribe_info")]])
        logger.warning("Yookassa credentials not set or shop ID is not numeric in confirm_pay handler.")
    else:
        text = info_confirm
        keyboard = [
            [InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {SUBSCRIPTION_PRICE_RUB:.0f} {SUBSCRIPTION_CURRENCY}", callback_data="subscribe_pay")]
        ]
        if tos_url:
             keyboard.append([InlineKeyboardButton("üìú –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø—Ä–æ—á–∏—Ç–∞–Ω–æ)", url=tos_url)])
        else:
             keyboard.append([InlineKeyboardButton("üìú –£—Å–ª–æ–≤–∏—è (–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏)", callback_data="view_tos")])

        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="subscribe_info")])
        reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        if query.message.text != text or query.message.reply_markup != reply_markup:
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
        else:
            await query.answer()
    except Exception as e:
        logger.error(f"Failed to show final payment confirmation to user {user_id}: {e}")


async def generate_payment_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.message: return

    user_id = query.from_user.id
    logger.info(f"--- generate_payment_link ENTERED for user {user_id} ---")

    error_yk_not_ready = escape_markdown_v2("‚ùå –æ—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    error_yk_config = escape_markdown_v2("‚ùå –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.")
    error_receipt = escape_markdown_v2("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ–∫–∞.")
    error_link_get = escape_markdown_v2("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã") # –ß–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    error_link_create = escape_markdown_v2("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã. ") # –ß–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    success_link = escape_markdown_v2(
        "‚úÖ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        "–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ. –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç)."
        )

    yookassa_ready = bool(YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY and YOOKASSA_SHOP_ID.isdigit())
    if not yookassa_ready:
        logger.error("Yookassa credentials not set correctly for payment generation.")
        await query.edit_message_text(error_yk_not_ready, reply_markup=None)
        return

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º Configuration
        current_shop_id = int(YOOKASSA_SHOP_ID)
        if not hasattr(Configuration, 'secret_key') or not Configuration.secret_key or \
           not hasattr(Configuration, 'account_id') or Configuration.account_id != current_shop_id:
             Configuration.configure(account_id=current_shop_id, secret_key=config.YOOKASSA_SECRET_KEY)
             logger.info(f"Yookassa re-configured within generate_payment_link (Shop ID: {current_shop_id}).")
    except ValueError:
         logger.error(f"YOOKASSA_SHOP_ID ({config.YOOKASSA_SHOP_ID}) invalid integer.")
         await query.edit_message_text(error_yk_config, reply_markup=None)
         return
    except Exception as conf_e:
        logger.error(f"Failed to configure Yookassa SDK in generate_payment_link: {conf_e}", exc_info=True)
        await query.edit_message_text(error_yk_config, reply_markup=None)
        return

    idempotence_key = str(uuid.uuid4())
    payment_description = f"Premium –ø–æ–¥–ø–∏—Å–∫–∞ @NunuAiBot –Ω–∞ {SUBSCRIPTION_DURATION_DAYS} –¥–Ω–µ–π (User ID: {user_id})"
    payment_metadata = {'telegram_user_id': str(user_id)}
    bot_username = context.bot_data.get('bot_username', "NunuAiBot")
    return_url = f"https://t.me/{bot_username}"

    try:
        receipt_items = [
            ReceiptItem({
                "description": f"–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø @{bot_username} –Ω–∞ {SUBSCRIPTION_DURATION_DAYS} –¥–Ω–µ–π",
                "quantity": 1.0,
                "amount": {"value": f"{SUBSCRIPTION_PRICE_RUB:.2f}", "currency": SUBSCRIPTION_CURRENCY},
                "vat_code": "1",
                "payment_mode": "full_prepayment",
                "payment_subject": "service"
            })
        ]
        user_email = f"user_{user_id}@telegram.bot" # Placeholder
        receipt_data = Receipt({
            "customer": {"email": user_email},
            "items": receipt_items,
        })
    except Exception as receipt_e:
        logger.error(f"Error preparing receipt data: {receipt_e}", exc_info=True)
        await query.edit_message_text(error_receipt, reply_markup=None)
        return

    try:
        builder = PaymentRequestBuilder()
        builder.set_amount({"value": f"{SUBSCRIPTION_PRICE_RUB:.2f}", "currency": SUBSCRIPTION_CURRENCY}) \
            .set_capture(True) \
            .set_confirmation({"type": "redirect", "return_url": return_url}) \
            .set_description(payment_description) \
            .set_metadata(payment_metadata) \
            .set_receipt(receipt_data)
        request = builder.build()
        logger.debug(f"Payment request built: {request.json()}")

        payment_response = await asyncio.to_thread(Payment.create, request, idempotence_key)

        if not payment_response or not payment_response.confirmation or not payment_response.confirmation.confirmation_url:
             logger.error(f"Yookassa API returned invalid response for user {user_id}. Status: {payment_response.status if payment_response else 'N/A'}. Response: {payment_response}")
             error_message = error_link_get
             if payment_response and payment_response.status: error_message += escape_markdown_v2(f" \\(—Å—Ç–∞—Ç—É—Å: {payment_response.status}\\)")
             error_message += escape_markdown_v2("\\.\n–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ\\.")
             await query.edit_message_text(error_message, reply_markup=None)
             return

        confirmation_url = payment_response.confirmation.confirmation_url
        logger.info(f"Created Yookassa payment {payment_response.id} for user {user_id}. URL: {confirmation_url}")

        keyboard = [[InlineKeyboardButton("üîó –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=confirmation_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(success_link, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"Error during Yookassa payment creation for user {user_id}: {e}", exc_info=True)
        user_message = error_link_create
        if hasattr(e, 'response') and hasattr(e.response, 'json'):
            try:
                err_data = e.response.json()
                err_type = err_data.get('type')
                err_desc = err_data.get('description')
                if err_type == 'error':
                    logger.error(f"Yookassa API Error details: {err_data}")
                    user_message += escape_markdown_v2(f"\\({err_desc or '–¥–µ—Ç–∞–ª–∏ –≤ –ª–æ–≥–∞—Ö'}\\)")
            except Exception: pass
        elif isinstance(e, httpx.RequestError):
             user_message += escape_markdown_v2(" –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ÆKassa\\.")
        else:
             user_message += escape_markdown_v2(" –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\\.")
        user_message += escape_markdown_v2("\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\\.")
        try:
            await query.edit_message_text(user_message, reply_markup=None)
        except Exception as send_e:
            logger.error(f"Failed to send error message after payment creation failure: {send_e}")


async def yookassa_webhook_placeholder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # This handler should not be called if Flask is handling the webhook
    logger.warning("Placeholder Yookassa webhook endpoint called via Telegram bot handler. This should be handled by the Flask app.")
    pass


# --- Edit Persona Conversation ---
async def _start_edit_convo(update: Update, context: ContextTypes.DEFAULT_TYPE, persona_id: int) -> int:
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id if update.effective_chat else update.effective_message.chat_id

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    context.user_data.clear()

    error_not_found = escape_markdown_v2("–ª–∏—á–Ω–æ—Å—Ç—å —Å id `{id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Ç–≤–æ—è.") # Placeholder
    error_db = escape_markdown_v2("–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    error_general = escape_markdown_v2("–Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string –¥–ª—è prompt_edit
    prompt_edit = r"—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º **{name}** \(id: `{id}`\)\n–≤—ã–±–µ—Ä–∏, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:" # Placeholder

    try:
        with next(get_db()) as db:
            persona_config = get_persona_by_id_and_owner(db, user_id, persona_id)
            if not persona_config:
                 final_error_msg = error_not_found.format(id=persona_id)
                 if update.callback_query: await update.callback_query.edit_message_text(final_error_msg)
                 else: await update.effective_message.reply_text(final_error_msg)
                 return ConversationHandler.END

            context.user_data['edit_persona_id'] = persona_id
            keyboard = await _get_edit_persona_keyboard(persona_config)
            reply_markup = InlineKeyboardMarkup(keyboard)
            msg_text = prompt_edit.format(name=escape_markdown_v2(persona_config.name), id=persona_id)

            if update.callback_query:
                 query = update.callback_query
                 try:
                      if query.message.text != msg_text or query.message.reply_markup != reply_markup:
                           await query.edit_message_text(msg_text, reply_markup=reply_markup)
                      else:
                           await query.answer()
                 except Exception as edit_err:
                      logger.warning(f"Could not edit message for edit start (persona {persona_id}): {edit_err}. Sending new message.")
                      await context.bot.send_message(chat_id, msg_text, reply_markup=reply_markup)
            else:
                 await update.effective_message.reply_text(msg_text, reply_markup=reply_markup)

        logger.info(f"User {user_id} started editing persona {persona_id}. Sending choice keyboard.")
        return EDIT_PERSONA_CHOICE
    except SQLAlchemyError as e:
         logger.error(f"Database error starting edit persona {persona_id}: {e}", exc_info=True)
         await context.bot.send_message(chat_id, error_db)
         return ConversationHandler.END
    except Exception as e:
         logger.error(f"Unexpected error starting edit persona {persona_id}: {e}", exc_info=True)
         await context.bot.send_message(chat_id, error_general)
         return ConversationHandler.END


async def edit_persona_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message: return ConversationHandler.END
    user_id = update.effective_user.id
    args = context.args
    logger.info(f"CMD /editpersona < User {user_id} with args: {args}")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
    usage_text = r"—É–∫–∞–∂–∏ id –ª–∏—á–Ω–æ—Å—Ç–∏: `/editpersona <id>`\n–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –∏–∑ /mypersonas"
    error_invalid_id = escape_markdown_v2("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    if not args or not args[0].isdigit():
        await update.message.reply_text(usage_text)
        return ConversationHandler.END
    try:
        persona_id = int(args[0])
    except ValueError:
         await update.message.reply_text(error_invalid_id)
         return ConversationHandler.END
    return await _start_edit_convo(update, context, persona_id)


async def edit_persona_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if not query or not query.data: return ConversationHandler.END
    await query.answer("–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    error_invalid_id = escape_markdown_v2("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ª–∏—á–Ω–æ—Å—Ç–∏ –≤ –∫–Ω–æ–ø–∫–µ.")
    try:
        persona_id = int(query.data.split('_')[-1])
        logger.info(f"CALLBACK edit_persona < User {query.from_user.id} for persona_id: {persona_id}")
        return await _start_edit_convo(update, context, persona_id)
    except (IndexError, ValueError):
        logger.error(f"Could not parse persona_id from edit_persona callback data: {query.data}")
        await query.edit_message_text(error_invalid_id)
        return ConversationHandler.END


async def edit_persona_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if not query or not query.data: return EDIT_PERSONA_CHOICE

    data = query.data
    persona_id = context.user_data.get('edit_persona_id')
    user_id = query.from_user.id

    logger.info(f"--- edit_persona_choice: User {user_id}, Persona ID from context: {persona_id}, Callback data: {data} ---")

    error_no_session = escape_markdown_v2("–æ—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞ (–Ω–µ—Ç id). –Ω–∞—á–Ω–∏ —Å–Ω–æ–≤–∞.")
    error_not_found = escape_markdown_v2("–æ—à–∏–±–∫–∞: –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    error_db = escape_markdown_v2("–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
    error_general = escape_markdown_v2("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
    info_premium_mood = "‚≠ê –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ" # Plain text for answer
    info_premium_field = "‚≠ê –ü–æ–ª–µ '{field_name}' –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ" # Placeholder for plain text answer
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
    prompt_edit_value = r"–æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è **{field_name}**.\n_—Ç–µ–∫—É—â–µ–µ:_\n`{current_value}`" # Placeholder
    prompt_edit_max_msg = r"–æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è **{field_name}** \(—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10\):\n_—Ç–µ–∫—É—â–µ–µ: {current_value}_" # Placeholder

    if not persona_id:
         logger.warning(f"User {user_id} in edit_persona_choice, but edit_persona_id not found in user_data.")
         await query.edit_message_text(error_no_session, reply_markup=None)
         return ConversationHandler.END

    # Fetch user and persona
    persona_config = None
    is_premium_user = False
    try:
        with next(get_db()) as db:
            user = get_or_create_user(db, user_id)
            persona_config = db.query(PersonaConfig).options(joinedload(PersonaConfig.owner)).filter(
                 PersonaConfig.id == persona_id,
                 PersonaConfig.owner_id == user.id
            ).first()

            if not persona_config:
                logger.warning(f"User {user_id} in edit_persona_choice: PersonaConfig {persona_id} not found or not owned.")
                await query.answer("–õ–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                await query.edit_message_text(error_not_found, reply_markup=None)
                context.user_data.clear()
                return ConversationHandler.END
            is_premium_user = persona_config.owner.is_active_subscriber

    except SQLAlchemyError as e:
         logger.error(f"DB error fetching user/persona in edit_persona_choice for persona {persona_id}: {e}", exc_info=True)
         await query.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
         await query.edit_message_text(error_db, reply_markup=None)
         return EDIT_PERSONA_CHOICE
    except Exception as e:
         logger.error(f"Unexpected error fetching user/persona in edit_persona_choice: {e}", exc_info=True)
         await query.answer("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", show_alert=True)
         await query.edit_message_text(error_general, reply_markup=None)
         return ConversationHandler.END

    # Handle callback data
    await query.answer()

    if data == "cancel_edit":
        return await edit_persona_cancel(update, context)

    if data == "edit_moods":
        if not is_premium_user and not is_admin(user_id):
             logger.info(f"User {user_id} (non-premium) attempted to edit moods for persona {persona_id}.")
             await query.answer(info_premium_mood, show_alert=True)
             return EDIT_PERSONA_CHOICE
        else:
             logger.info(f"User {user_id} proceeding to edit moods for persona {persona_id}.")
             return await edit_moods_menu(update, context, persona_config=persona_config)

    if data.startswith("edit_field_"):
        field = data.replace("edit_field_", "")
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –∏–∑ FIELD_MAP
        field_display_name = FIELD_MAP.get(field, escape_markdown_v2(field))
        logger.info(f"User {user_id} selected field '{field}' for persona {persona_id}.")

        advanced_fields = ["should_respond_prompt_template", "spam_prompt_template",
                           "photo_prompt_template", "voice_prompt_template", "max_response_messages"]
        if field in advanced_fields and not is_premium_user and not is_admin(user_id):
             logger.info(f"User {user_id} (non-premium) attempted to edit premium field '{field}' for persona {persona_id}.")
             # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º plain text –æ—Ç–≤–µ—Ç
             await query.answer(info_premium_field.format(field_name=field_display_name.replace('\\','')), show_alert=True) # –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
             return EDIT_PERSONA_CHOICE

        context.user_data['edit_field'] = field
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_persona_back")
        reply_markup = InlineKeyboardMarkup([[back_button]])

        if field == "max_response_messages":
            current_value = getattr(persona_config, field, 3)
            final_prompt = prompt_edit_max_msg.format(field_name=field_display_name, current_value=current_value)
            await query.edit_message_text(final_prompt, reply_markup=reply_markup)
            return EDIT_MAX_MESSAGES
        else:
            current_value = getattr(persona_config, field, "")
            current_value_display = escape_markdown_v2(str(current_value) if len(str(current_value)) < 300 else str(current_value)[:300] + "...")
            final_prompt = prompt_edit_value.format(field_name=field_display_name, current_value=current_value_display)
            await query.edit_message_text(final_prompt, reply_markup=reply_markup)
            return EDIT_FIELD

    if data == "edit_persona_back":
         logger.info(f"User {user_id} pressed back button in edit_persona_choice for persona {persona_id}.")
         keyboard = await _get_edit_persona_keyboard(persona_config)
         # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
         prompt_edit_back = r"—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º **{name}** \(id: `{id}`\)\n–≤—ã–±–µ—Ä–∏, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"
         final_back_msg = prompt_edit_back.format(name=escape_markdown_v2(persona_config.name), id=persona_id)
         await query.edit_message_text(final_back_msg, reply_markup=InlineKeyboardMarkup(keyboard))
         context.user_data.pop('edit_field', None)
         return EDIT_PERSONA_CHOICE

    logger.warning(f"User {user_id} sent unhandled callback data '{data}' in EDIT_PERSONA_CHOICE for persona {persona_id}.")
    await query.message.reply_text(escape_markdown_v2("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."))
    return EDIT_PERSONA_CHOICE


async def edit_field_update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message or not update.message.text: return EDIT_FIELD
    new_value = update.message.text.strip()
    field = context.user_data.get('edit_field')
    persona_id = context.user_data.get('edit_persona_id')
    user_id = update.effective_user.id

    logger.info(f"--- edit_field_update: User={user_id}, PersonaID={persona_id}, Field='{field}' ---")

    error_no_session = escape_markdown_v2("–æ—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞. –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞.")
    error_not_found = escape_markdown_v2("–æ—à–∏–±–∫–∞: –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    error_validation = escape_markdown_v2("{field_name}: –º–∞–∫—Å. {max_len} —Å–∏–º–≤–æ–ª–æ–≤.") # Placeholder
    error_validation_min = escape_markdown_v2("{field_name}: –º–∏–Ω. {min_len} —Å–∏–º–≤–æ–ª–∞.") # Placeholder
    error_name_taken = escape_markdown_v2("–∏–º—è '{name}' —É–∂–µ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–æ–π —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç—å—é. –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ:") # Placeholder
    error_db = escape_markdown_v2("‚ùå –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
    error_general = escape_markdown_v2("‚ùå –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
    success_update = r"‚úÖ –ø–æ–ª–µ **{field_name}** –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–∏ **{persona_name}** –æ–±–Ω–æ–≤–ª–µ–Ω–æ!" # Placeholder
    prompt_next_edit = r"—á—Ç–æ –µ—â–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è **{name}** \(id: `{id}`\)?" # Placeholder

    if not field or not persona_id:
        logger.warning(f"User {user_id} in edit_field_update, but edit_field ('{field}') or edit_persona_id ('{persona_id}') missing.")
        await update.message.reply_text(error_no_session, reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    field_display_name = FIELD_MAP.get(field, escape_markdown_v2(field))

    # Validation logic
    validation_error_msg = None
    max_len_map = {
        "name": 50, "description": 1500, "system_prompt_template": 3000,
        "should_respond_prompt_template": 1000, "spam_prompt_template": 1000,
        "photo_prompt_template": 1000, "voice_prompt_template": 1000
    }
    min_len_map = {"name": 2}

    if field in max_len_map and len(new_value) > max_len_map[field]:
        validation_error_msg = error_validation.format(field_name=field_display_name, max_len=max_len_map[field])
    if field in min_len_map and len(new_value) < min_len_map[field]:
        validation_error_msg = error_validation_min.format(field_name=field_display_name, min_len=min_len_map[field])

    if validation_error_msg:
        logger.debug(f"Validation failed for field '{field}': {validation_error_msg}")
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_persona_back")
        await update.message.reply_text(f"{validation_error_msg} {escape_markdown_v2('–ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:')}", reply_markup=InlineKeyboardMarkup([[back_button]]))
        return EDIT_FIELD

    try:
        with next(get_db()) as db:
            persona_config = get_persona_by_id_and_owner(db, user_id, persona_id)
            if not persona_config:
                 logger.warning(f"User {user_id}: PersonaConfig {persona_id} not found/owned during field update.")
                 await update.message.reply_text(error_not_found, reply_markup=ReplyKeyboardRemove())
                 context.user_data.clear()
                 return ConversationHandler.END

            # Check name uniqueness
            if field == "name" and new_value.lower() != persona_config.name.lower():
                user = get_or_create_user(db, user_id)
                existing = get_persona_by_name_and_owner(db, user.id, new_value)
                if existing:
                    logger.info(f"User {user_id} tried to set name to '{new_value}', but it's already taken by persona {existing.id}.")
                    back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_persona_back")
                    final_name_taken_msg = error_name_taken.format(name=escape_markdown_v2(new_value))
                    await update.message.reply_text(final_name_taken_msg, reply_markup=InlineKeyboardMarkup([[back_button]]))
                    return EDIT_FIELD

            # Update field
            setattr(persona_config, field, new_value)
            db.commit()
            logger.info(f"User {user_id} successfully updated field '{field}' for persona {persona_id}.")

            final_success_msg = success_update.format(field_name=field_display_name, persona_name=escape_markdown_v2(persona_config.name))
            await update.message.reply_text(final_success_msg)

            # Return to main edit menu
            context.user_data.pop('edit_field', None)
            db.refresh(persona_config)
            keyboard = await _get_edit_persona_keyboard(persona_config)
            final_next_prompt = prompt_next_edit.format(name=escape_markdown_v2(persona_config.name), id=persona_id)
            await update.message.reply_text(final_next_prompt, reply_markup=InlineKeyboardMarkup(keyboard))
            return EDIT_PERSONA_CHOICE

    except SQLAlchemyError as e:
         logger.error(f"Database error updating field {field} for persona {persona_id}: {e}", exc_info=True)
         await update.message.reply_text(error_db)
         return await _try_return_to_edit_menu(update, context, user_id, persona_id)
    except Exception as e:
         logger.error(f"Unexpected error updating field {field} for persona {persona_id}: {e}", exc_info=True)
         await update.message.reply_text(error_general)
         context.user_data.clear()
         return ConversationHandler.END


async def edit_max_messages_update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message or not update.message.text: return EDIT_MAX_MESSAGES
    new_value_str = update.message.text.strip()
    field = "max_response_messages"
    persona_id = context.user_data.get('edit_persona_id')
    user_id = update.effective_user.id

    logger.info(f"--- edit_max_messages_update: User={user_id}, PersonaID={persona_id}, Value='{new_value_str}' ---")

    error_no_session = escape_markdown_v2("–æ—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞ (–Ω–µ—Ç persona_id). –Ω–∞—á–Ω–∏ —Å–Ω–æ–≤–∞.")
    error_not_found = escape_markdown_v2("–æ—à–∏–±–∫–∞: –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    error_invalid_value = escape_markdown_v2("–Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")
    error_db = escape_markdown_v2("‚ùå –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
    error_general = escape_markdown_v2("‚ùå –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
    success_update = r"‚úÖ –º–∞–∫—Å\. —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è **{name}** —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: **{value}**" # Placeholder
    prompt_next_edit = r"—á—Ç–æ –µ—â–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è **{name}** \(id: `{id}`\)?" # Placeholder

    if not persona_id:
        logger.warning(f"User {user_id} in edit_max_messages_update, but edit_persona_id missing.")
        await update.message.reply_text(error_no_session, reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    try:
        new_value = int(new_value_str)
        if not (1 <= new_value <= 10): raise ValueError("Value out of range 1-10")
    except ValueError:
        logger.debug(f"Validation failed for max_response_messages: '{new_value_str}' is not int 1-10.")
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_persona_back")
        await update.message.reply_text(error_invalid_value, reply_markup=InlineKeyboardMarkup([[back_button]]))
        return EDIT_MAX_MESSAGES

    try:
        with next(get_db()) as db:
            persona_config = get_persona_by_id_and_owner(db, user_id, persona_id)
            if not persona_config:
                 logger.warning(f"User {user_id}: PersonaConfig {persona_id} not found or not owned in edit_max_messages_update.")
                 await update.message.reply_text(error_not_found, reply_markup=ReplyKeyboardRemove())
                 context.user_data.clear()
                 return ConversationHandler.END

            persona_config.max_response_messages = new_value
            db.commit()
            logger.info(f"User {user_id} updated max_response_messages to {new_value} for persona {persona_id}.")

            final_success_msg = success_update.format(name=escape_markdown_v2(persona_config.name), value=new_value)
            await update.message.reply_text(final_success_msg)

            # Return to main edit menu
            db.refresh(persona_config)
            keyboard = await _get_edit_persona_keyboard(persona_config)
            final_next_prompt = prompt_next_edit.format(name=escape_markdown_v2(persona_config.name), id=persona_id)
            await update.message.reply_text(final_next_prompt, reply_markup=InlineKeyboardMarkup(keyboard))
            return EDIT_PERSONA_CHOICE

    except SQLAlchemyError as e:
         logger.error(f"Database error updating max_response_messages for persona {persona_id}: {e}", exc_info=True)
         await update.message.reply_text(error_db)
         return await _try_return_to_edit_menu(update, context, user_id, persona_id)
    except Exception as e:
         logger.error(f"Unexpected error updating max_response_messages for persona {persona_id}: {e}", exc_info=True)
         await update.message.reply_text(error_general)
         context.user_data.clear()
         return ConversationHandler.END


async def _get_edit_persona_keyboard(persona_config: PersonaConfig) -> List[List[InlineKeyboardButton]]:
    if not persona_config:
        logger.error("_get_edit_persona_keyboard called with None persona_config")
        return [[InlineKeyboardButton("‚ùå –û—à–∏–±–∫–∞: –õ–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", callback_data="cancel_edit")]]

    max_resp_msg = getattr(persona_config, 'max_response_messages', 3)

    keyboard = [
        [InlineKeyboardButton("üìù –ò–º—è", callback_data="edit_field_name"), InlineKeyboardButton("üìú –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_description")],
        [InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", callback_data="edit_field_system_prompt_template")],
        [InlineKeyboardButton(f"üìä –ú–∞–∫—Å. –æ—Ç–≤–µ—Ç–æ–≤ ({max_resp_msg}) ‚≠ê", callback_data="edit_field_max_response_messages")],
        [InlineKeyboardButton("ü§î –ü—Ä–æ–º–ø—Ç '–û—Ç–≤–µ—á–∞—Ç—å?' ‚≠ê", callback_data="edit_field_should_respond_prompt_template")],
        [InlineKeyboardButton("üí¨ –ü—Ä–æ–º–ø—Ç —Å–ø–∞–º–∞ ‚≠ê", callback_data="edit_field_spam_prompt_template")],
        [InlineKeyboardButton("üñºÔ∏è –ü—Ä–æ–º–ø—Ç —Ñ–æ—Ç–æ ‚≠ê", callback_data="edit_field_photo_prompt_template"), InlineKeyboardButton("üé§ –ü—Ä–æ–º–ø—Ç –≥–æ–ª–æ—Å–∞ ‚≠ê", callback_data="edit_field_voice_prompt_template")],
        [InlineKeyboardButton("üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ‚≠ê", callback_data="edit_moods")],
        [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="cancel_edit")]
    ]
    return keyboard


async def _get_edit_moods_keyboard_internal(persona_config: PersonaConfig) -> List[List[InlineKeyboardButton]]:
     if not persona_config: return []
     try:
         moods = json.loads(persona_config.mood_prompts_json or '{}')
     except json.JSONDecodeError:
         logger.warning(f"Invalid JSON in mood_prompts_json for persona {persona_config.id} when building keyboard.")
         moods = {}

     keyboard = []
     if moods:
         sorted_moods = sorted(moods.keys(), key=str.lower)
         for mood_name in sorted_moods:
              safe_mood_name = re.sub(r'[^\w-]', '', mood_name)
              if not safe_mood_name: continue

              keyboard.append([
                  InlineKeyboardButton(f"‚úèÔ∏è {mood_name.capitalize()}", callback_data=f"editmood_select_{safe_mood_name}"),
                  InlineKeyboardButton(f"üóëÔ∏è", callback_data=f"deletemood_confirm_{safe_mood_name}")
              ])
     keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", callback_data="editmood_add")])
     keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_persona_back")])
     return keyboard


async def _try_return_to_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, persona_id: int) -> int:
    logger.debug(f"Attempting to return to main edit menu for user {user_id}, persona {persona_id} after error.")
    message_target = update.effective_message
    error_cannot_return = escape_markdown_v2("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞).")
    error_cannot_return_general = escape_markdown_v2("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
    prompt_edit = r"—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º **{name}** \(id: `{id}`\)\n–≤—ã–±–µ—Ä–∏, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"

    if not message_target:
        logger.warning("Cannot return to edit menu: effective_message is None.")
        context.user_data.clear()
        return ConversationHandler.END
    try:
        with next(get_db()) as db:
            persona_config = get_persona_by_id_and_owner(db, user_id, persona_id)
            if persona_config:
                keyboard = await _get_edit_persona_keyboard(persona_config)
                final_prompt = prompt_edit.format(name=escape_markdown_v2(persona_config.name), id=persona_id)
                await message_target.reply_text(final_prompt, reply_markup=InlineKeyboardMarkup(keyboard))
                return EDIT_PERSONA_CHOICE
            else:
                logger.warning(f"Persona {persona_id} not found when trying to return to main edit menu.")
                await message_target.reply_text(error_cannot_return)
                context.user_data.clear()
                return ConversationHandler.END
    except Exception as e:
        logger.error(f"Failed to return to main edit menu after error: {e}", exc_info=True)
        await message_target.reply_text(error_cannot_return_general)
        context.user_data.clear()
        return ConversationHandler.END


async def _try_return_to_mood_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, persona_id: int) -> int:
     logger.debug(f"Attempting to return to mood menu for user {user_id}, persona {persona_id} after error.")
     message_target = update.effective_message
     error_cannot_return = escape_markdown_v2("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π (–ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞).")
     error_cannot_return_general = escape_markdown_v2("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π.")
     # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
     prompt_mood_menu = r"—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º–∏ –¥–ª—è **{name}**:"

     if not message_target:
         logger.warning("Cannot return to mood menu: effective_message is None.")
         context.user_data.clear()
         return ConversationHandler.END
     try:
         with next(get_db()) as db:
             persona_config = get_persona_by_id_and_owner(db, user_id, persona_id)
             if persona_config:
                 keyboard = await _get_edit_moods_keyboard_internal(persona_config)
                 final_prompt = prompt_mood_menu.format(name=escape_markdown_v2(persona_config.name))
                 await message_target.reply_text(final_prompt, reply_markup=InlineKeyboardMarkup(keyboard))
                 return EDIT_MOOD_CHOICE
             else:
                 logger.warning(f"Persona {persona_id} not found when trying to return to mood menu.")
                 await message_target.reply_text(error_cannot_return)
                 context.user_data.clear()
                 return ConversationHandler.END
     except Exception as e:
         logger.error(f"Failed to return to mood menu after error: {e}", exc_info=True)
         await message_target.reply_text(error_cannot_return_general)
         context.user_data.clear()
         return ConversationHandler.END


async def edit_moods_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, persona_config: Optional[PersonaConfig] = None) -> int:
    query = update.callback_query
    if not query: return ConversationHandler.END

    persona_id = context.user_data.get('edit_persona_id')
    user_id = query.from_user.id

    logger.info(f"--- edit_moods_menu: User={user_id}, PersonaID={persona_id} ---")

    error_no_session = escape_markdown_v2("–æ—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞.")
    error_not_found = escape_markdown_v2("–æ—à–∏–±–∫–∞: –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    error_db = escape_markdown_v2("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π.")
    info_premium = "‚≠ê –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ" # Plain text for answer
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
    prompt_mood_menu = r"—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º–∏ –¥–ª—è **{name}**:"

    if not persona_id:
        logger.warning(f"User {user_id} in edit_moods_menu, but edit_persona_id missing.")
        await query.edit_message_text(error_no_session, reply_markup=None)
        return ConversationHandler.END

    local_persona_config = persona_config
    if local_persona_config is None:
        try:
            with next(get_db()) as db:
                local_persona_config = get_persona_by_id_and_owner(db, user_id, persona_id)
                if not local_persona_config:
                    logger.warning(f"User {user_id}: PersonaConfig {persona_id} not found/owned in edit_moods_menu fetch.")
                    await query.answer("–õ–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    await query.edit_message_text(error_not_found, reply_markup=None)
                    context.user_data.clear()
                    return ConversationHandler.END
        except Exception as e:
             logger.error(f"DB Error fetching persona in edit_moods_menu: {e}", exc_info=True)
             await query.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
             await query.edit_message_text(error_db, reply_markup=None)
             return await _try_return_to_edit_menu(update, context, user_id, persona_id)

    # Check premium status
    try:
        with next(get_db()) as db:
             if not hasattr(local_persona_config, 'owner') or not local_persona_config.owner:
                  owner = db.query(User).filter(User.id == local_persona_config.owner_id).first()
                  is_prem = owner.is_active_subscriber if owner else False
             else:
                  is_prem = local_persona_config.owner.is_active_subscriber

             if not is_prem and not is_admin(user_id):
                 logger.warning(f"User {user_id} (non-premium) reached mood editor for {persona_id} unexpectedly.")
                 await query.answer(info_premium, show_alert=True)
                 return await _try_return_to_edit_menu(update, context, user_id, persona_id)
    except Exception as e:
        logger.error(f"Error checking premium status in edit_moods_menu: {e}", exc_info=True)

    logger.debug(f"Showing moods menu for persona {persona_id}")
    keyboard = await _get_edit_moods_keyboard_internal(local_persona_config)
    reply_markup = InlineKeyboardMarkup(keyboard)
    msg_text = prompt_mood_menu.format(name=escape_markdown_v2(local_persona_config.name))

    try:
        if query.message.text != msg_text or query.message.reply_markup != reply_markup:
            await query.edit_message_text(msg_text, reply_markup=reply_markup)
        else:
            await query.answer()
    except Exception as e:
         logger.error(f"Error editing moods menu message for persona {persona_id}: {e}")
         try:
            await query.message.reply_text(msg_text, reply_markup=reply_markup)
         except Exception as send_e:
            logger.error(f"Failed to send fallback moods menu message: {send_e}")

    return EDIT_MOOD_CHOICE


async def edit_mood_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if not query or not query.data: return EDIT_MOOD_CHOICE

    data = query.data
    persona_id = context.user_data.get('edit_persona_id')
    user_id = query.from_user.id

    logger.info(f"--- edit_mood_choice: User={user_id}, PersonaID={persona_id}, Data={data} ---")

    error_no_session = escape_markdown_v2("–æ—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞.")
    error_not_found = escape_markdown_v2("–æ—à–∏–±–∫–∞: –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    error_db = escape_markdown_v2("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    error_unhandled_choice = escape_markdown_v2("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
    prompt_new_name = r"–≤–≤–µ–¥–∏ **–Ω–∞–∑–≤–∞–Ω–∏–µ** –Ω–æ–≤–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è \(–æ–¥–Ω–æ —Å–ª–æ–≤–æ, –ª–∞—Ç–∏–Ω–∏—Ü–∞/–∫–∏—Ä–∏–ª–ª–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤\):"
    prompt_new_prompt = r"—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: **{name}**\n\n_—Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:_\n`{prompt}`\n\n–æ—Ç–ø—Ä–∞–≤—å **–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞**:" # Placeholder
    prompt_confirm_delete = r"—Ç–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ **'{name}'**\?" # Placeholder

    if not persona_id:
        logger.warning(f"User {user_id} in edit_mood_choice, but edit_persona_id missing.")
        await query.edit_message_text(error_no_session)
        return ConversationHandler.END

    # Fetch persona config
    persona_config = None
    try:
        with next(get_db()) as db:
             persona_config = get_persona_by_id_and_owner(db, user_id, persona_id)
             if not persona_config:
                 logger.warning(f"User {user_id}: PersonaConfig {persona_id} not found/owned in edit_mood_choice.")
                 await query.answer("–õ–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                 await query.edit_message_text(error_not_found, reply_markup=None)
                 context.user_data.clear()
                 return ConversationHandler.END
    except Exception as e:
         logger.error(f"DB Error fetching persona in edit_mood_choice: {e}", exc_info=True)
         await query.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
         await query.edit_message_text(error_db, reply_markup=None)
         return EDIT_MOOD_CHOICE

    await query.answer()

    # --- Handle Mood Menu Actions ---
    if data == "edit_persona_back":
        logger.debug(f"User {user_id} going back from mood menu to main edit menu for {persona_id}.")
        keyboard = await _get_edit_persona_keyboard(persona_config)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
        prompt_edit = r"—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º **{name}** \(id: `{id}`\)\n–≤—ã–±–µ—Ä–∏, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"
        final_prompt = prompt_edit.format(name=escape_markdown_v2(persona_config.name), id=persona_id)
        await query.edit_message_text(final_prompt, reply_markup=InlineKeyboardMarkup(keyboard))
        context.user_data.pop('edit_mood_name', None)
        context.user_data.pop('delete_mood_name', None)
        return EDIT_PERSONA_CHOICE

    if data == "editmood_add":
        logger.debug(f"User {user_id} starting to add mood for {persona_id}.")
        context.user_data['edit_mood_name'] = None
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_moods_back_cancel")
        await query.edit_message_text(prompt_new_name, reply_markup=InlineKeyboardMarkup([[back_button]]))
        return EDIT_MOOD_NAME

    if data.startswith("editmood_select_"):
        mood_name_safe = data.split("editmood_select_", 1)[1]
        context.user_data['edit_mood_name'] = mood_name_safe
        logger.debug(f"User {user_id} selected mood '{mood_name_safe}' to edit for {persona_id}.")

        current_prompt_raw = "_–Ω–µ –Ω–∞–π–¥–µ–Ω–æ_"
        original_mood_name = mood_name_safe
        try:
            current_moods = json.loads(persona_config.mood_prompts_json or '{}')
            original_mood_name = next((k for k in current_moods if re.sub(r'[^\w-]', '', k) == mood_name_safe), mood_name_safe)
            current_prompt_raw = current_moods.get(original_mood_name, "_–Ω–µ—Ç –ø—Ä–æ–º–ø—Ç–∞_")
            context.user_data['edit_mood_name'] = original_mood_name

        except Exception as e:
            logger.error(f"Error reading moods JSON for persona {persona_id} in editmood_select: {e}")
            current_prompt_raw = "_–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞_"

        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_moods_back_cancel")
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ``, –∏–º—è –¥–ª—è **
        prompt_display = escape_markdown_v2(current_prompt_raw[:300] + "..." if len(current_prompt_raw) > 300 else current_prompt_raw)
        display_name = escape_markdown_v2(context.user_data.get('edit_mood_name', mood_name_safe))
        final_prompt = prompt_new_prompt.format(name=display_name, prompt=prompt_display)
        await query.edit_message_text(final_prompt, reply_markup=InlineKeyboardMarkup([[back_button]]))
        return EDIT_MOOD_PROMPT

    if data.startswith("deletemood_confirm_"):
         mood_name_safe = data.split("deletemood_confirm_", 1)[1]
         original_mood_name = mood_name_safe
         try:
             current_moods = json.loads(persona_config.mood_prompts_json or '{}')
             original_mood_name = next((k for k in current_moods if re.sub(r'[^\w-]', '', k) == mood_name_safe), mood_name_safe)
         except Exception: pass

         context.user_data['delete_mood_name'] = original_mood_name
         logger.debug(f"User {user_id} initiated delete for mood '{original_mood_name}' (safe: {mood_name_safe}) for {persona_id}. Asking confirmation.")
         escaped_original_name = escape_markdown_v2(original_mood_name)
         # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
         keyboard = [
             [InlineKeyboardButton(f"‚úÖ –¥–∞, —É–¥–∞–ª–∏—Ç—å '{original_mood_name}'", callback_data=f"deletemood_delete_{mood_name_safe}")],
             [InlineKeyboardButton("‚ùå –Ω–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="edit_moods_back_cancel")]
            ]
         final_confirm_prompt = prompt_confirm_delete.format(name=escaped_original_name)
         await query.edit_message_text(final_confirm_prompt, reply_markup=InlineKeyboardMarkup(keyboard))
         return DELETE_MOOD_CONFIRM

    if data == "edit_moods_back_cancel":
         logger.debug(f"User {user_id} pressed back button, returning to mood list for {persona_id}.")
         context.user_data.pop('edit_mood_name', None)
         context.user_data.pop('delete_mood_name', None)
         return await edit_moods_menu(update, context, persona_config=persona_config)

    logger.warning(f"User {user_id} sent unhandled callback '{data}' in EDIT_MOOD_CHOICE for {persona_id}.")
    await query.message.reply_text(error_unhandled_choice)
    return await edit_moods_menu(update, context, persona_config=persona_config)


async def edit_mood_name_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message or not update.message.text: return EDIT_MOOD_NAME
    mood_name_raw = update.message.text.strip()
    mood_name_match = re.match(r'^[\w–∞-—è–ê-–Ø—ë–Å-]+$', mood_name_raw, re.UNICODE)
    persona_id = context.user_data.get('edit_persona_id')
    user_id = update.effective_user.id

    logger.info(f"--- edit_mood_name_received: User={user_id}, PersonaID={persona_id}, Name='{mood_name_raw}' ---")

    error_no_session = escape_markdown_v2("–æ—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞.")
    error_not_found = escape_markdown_v2("–æ—à–∏–±–∫–∞: –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
    error_validation = r"–Ω–∞–∑–≤–∞–Ω–∏–µ: 1\-30 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/–¥–µ—Ñ–∏—Å/–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ \(–∫–∏—Ä–∏–ª–ª–∏—Ü–∞/–ª–∞—Ç–∏–Ω–∏—Ü–∞\), –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤\. –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ:"
    error_name_exists = escape_markdown_v2("–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ:") # Placeholder
    error_db = escape_markdown_v2("–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–º–µ–Ω–∏.")
    error_general = escape_markdown_v2("–Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
    prompt_for_prompt = r"–æ—Ç–ª–∏—á–Ω–æ\! —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å **—Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞** –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è **'{name}'**:" # Placeholder

    if not persona_id:
        logger.warning(f"User {user_id} in edit_mood_name_received, but edit_persona_id missing.")
        await update.message.reply_text(error_no_session, reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    if not mood_name_match or len(mood_name_raw) > 30:
        logger.debug(f"Validation failed for mood name '{mood_name_raw}'.")
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_moods_back_cancel")
        await update.message.reply_text(error_validation, reply_markup=InlineKeyboardMarkup([[back_button]]))
        return EDIT_MOOD_NAME

    mood_name = mood_name_raw

    try:
        with next(get_db()) as db:
            persona_config = get_persona_by_id_and_owner(db, user_id, persona_id)
            if not persona_config:
                 logger.warning(f"User {user_id}: Persona {persona_id} not found/owned in mood name check.")
                 await update.message.reply_text(error_not_found, reply_markup=ReplyKeyboardRemove())
                 context.user_data.clear()
                 return ConversationHandler.END

            current_moods = {}
            try:
                 current_moods = json.loads(persona_config.mood_prompts_json or '{}')
            except json.JSONDecodeError:
                 logger.warning(f"Invalid JSON for persona {persona_id} in mood name check, starting fresh.")

            if any(existing_name.lower() == mood_name.lower() for existing_name in current_moods):
                logger.info(f"User {user_id} tried mood name '{mood_name}' which already exists for persona {persona_id}.")
                back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_moods_back_cancel")
                final_exists_msg = error_name_exists.format(name=escape_markdown_v2(mood_name))
                await update.message.reply_text(final_exists_msg, reply_markup=InlineKeyboardMarkup([[back_button]]))
                return EDIT_MOOD_NAME

            # Store name and proceed
            context.user_data['edit_mood_name'] = mood_name
            logger.debug(f"Stored mood name '{mood_name}' for user {user_id}. Asking for prompt.")
            back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_moods_back_cancel")
            final_prompt = prompt_for_prompt.format(name=escape_markdown_v2(mood_name))
            await update.message.reply_text(final_prompt, reply_markup=InlineKeyboardMarkup([[back_button]]))
            return EDIT_MOOD_PROMPT

    except SQLAlchemyError as e:
        logger.error(f"DB error checking mood name uniqueness for persona {persona_id}: {e}", exc_info=True)
        await update.message.reply_text(error_db, reply_markup=ReplyKeyboardRemove())
        return EDIT_MOOD_NAME
    except Exception as e:
        logger.error(f"Unexpected error checking mood name for persona {persona_id}: {e}", exc_info=True)
        await update.message.reply_text(error_general, reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END


async def edit_mood_prompt_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message or not update.message.text: return EDIT_MOOD_PROMPT
    mood_prompt = update.message.text.strip()
    mood_name = context.user_data.get('edit_mood_name')
    persona_id = context.user_data.get('edit_persona_id')
    user_id = update.effective_user.id

    logger.info(f"--- edit_mood_prompt_received: User={user_id}, PersonaID={persona_id}, Mood='{mood_name}' ---")

    error_no_session = escape_markdown_v2("–æ—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞.")
    error_not_found = escape_markdown_v2("–æ—à–∏–±–∫–∞: –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    error_validation = escape_markdown_v2("–ø—Ä–æ–º–ø—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: 1-1500 —Å–∏–º–≤–æ–ª–æ–≤. –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ:")
    error_db = escape_markdown_v2("‚ùå –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.")
    error_general = escape_markdown_v2("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
    success_saved = r"‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ **{name}** —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!" # Placeholder

    if not mood_name or not persona_id:
        logger.warning(f"User {user_id} in edit_mood_prompt_received, but mood_name ('{mood_name}') or persona_id ('{persona_id}') missing.")
        await update.message.reply_text(error_no_session, reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    if not mood_prompt or len(mood_prompt) > 1500:
        logger.debug(f"Validation failed for mood prompt (length={len(mood_prompt)}).")
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_moods_back_cancel")
        await update.message.reply_text(error_validation, reply_markup=InlineKeyboardMarkup([[back_button]]))
        return EDIT_MOOD_PROMPT

    try:
        with next(get_db()) as db:
            persona_config = get_persona_by_id_and_owner(db, user_id, persona_id)
            if not persona_config:
                logger.warning(f"User {user_id}: Persona {persona_id} not found/owned when saving mood prompt.")
                await update.message.reply_text(error_not_found, reply_markup=ReplyKeyboardRemove())
                context.user_data.clear()
                return ConversationHandler.END

            try:
                 current_moods = json.loads(persona_config.mood_prompts_json or '{}')
            except json.JSONDecodeError:
                 logger.warning(f"Invalid JSON for persona {persona_id} when saving mood prompt, resetting moods.")
                 current_moods = {}

            # Add or update mood
            current_moods[mood_name] = mood_prompt
            persona_config.set_moods(db, current_moods)
            db.commit()

            context.user_data.pop('edit_mood_name', None)
            logger.info(f"User {user_id} updated/added mood '{mood_name}' for persona {persona_id}.")
            final_success_msg = success_saved.format(name=escape_markdown_v2(mood_name))
            await update.message.reply_text(final_success_msg)

            # Return to mood menu
            db.refresh(persona_config)
            return await edit_moods_menu(update, context, persona_config=persona_config)

    except SQLAlchemyError as e:
        logger.error(f"Database error saving mood '{mood_name}' for persona {persona_id}: {e}", exc_info=True)
        await update.message.reply_text(error_db)
        return await _try_return_to_mood_menu(update, context, user_id, persona_id)
    except Exception as e:
        logger.error(f"Error saving mood '{mood_name}' for persona {persona_id}: {e}", exc_info=True)
        await update.message.reply_text(error_general)
        return await _try_return_to_mood_menu(update, context, user_id, persona_id)


async def delete_mood_confirmed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if not query or not query.data: return DELETE_MOOD_CONFIRM

    data = query.data
    mood_name_to_delete = context.user_data.get('delete_mood_name')
    persona_id = context.user_data.get('edit_persona_id')
    user_id = query.from_user.id

    logger.info(f"--- delete_mood_confirmed: User={user_id}, PersonaID={persona_id}, MoodToDelete='{mood_name_to_delete}' ---")

    error_no_session = escape_markdown_v2("–æ—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ —Å–µ—Å—Å–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞.")
    error_not_found_persona = escape_markdown_v2("–æ—à–∏–±–∫–∞: –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    error_db = escape_markdown_v2("‚ùå –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.")
    error_general = escape_markdown_v2("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.")
    info_not_found_mood = escape_markdown_v2("–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (—É–∂–µ —É–¥–∞–ª–µ–Ω–æ?).") # Placeholder
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
    success_delete = r"üóëÔ∏è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ **{name}** —É–¥–∞–ª–µ–Ω–æ." # Placeholder

    safe_mood_name_from_callback = ""
    if data.startswith("deletemood_delete_"):
        safe_mood_name_from_callback = data.split("deletemood_delete_", 1)[1]

    if not mood_name_to_delete or not persona_id or not safe_mood_name_from_callback:
        logger.warning(f"User {user_id}: Missing state in delete_mood_confirmed. Mood='{mood_name_to_delete}', SafeCB='{safe_mood_name_from_callback}', PersonaID='{persona_id}'")
        await query.answer("–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏", show_alert=True)
        await query.edit_message_text(error_no_session, reply_markup=None)
        return await _try_return_to_mood_menu(update, context, user_id, persona_id)

    await query.answer("–£–¥–∞–ª—è–µ–º...")

    logger.warning(f"User {user_id} confirmed deletion of mood '{mood_name_to_delete}' for persona {persona_id}.")

    try:
        with next(get_db()) as db:
            persona_config = get_persona_by_id_and_owner(db, user_id, persona_id)
            if not persona_config:
                logger.warning(f"User {user_id}: Persona {persona_id} not found/owned during mood deletion.")
                await query.edit_message_text(error_not_found_persona, reply_markup=None)
                context.user_data.clear()
                return ConversationHandler.END

            try:
                current_moods = json.loads(persona_config.mood_prompts_json or '{}')
            except json.JSONDecodeError:
                 logger.warning(f"Invalid JSON for persona {persona_id} during mood deletion, assuming empty.")
                 current_moods = {}

            if mood_name_to_delete in current_moods:
                del current_moods[mood_name_to_delete]
                persona_config.set_moods(db, current_moods)
                db.commit()

                context.user_data.pop('delete_mood_name', None)
                logger.info(f"Successfully deleted mood '{mood_name_to_delete}' for persona {persona_id}.")
                final_success_msg = success_delete.format(name=escape_markdown_v2(mood_name_to_delete))
                await query.edit_message_text(final_success_msg)
            else:
                logger.warning(f"Mood '{mood_name_to_delete}' not found for deletion in persona {persona_id} (maybe already deleted).")
                final_not_found_msg = info_not_found_mood.format(name=escape_markdown_v2(mood_name_to_delete))
                await query.edit_message_text(final_not_found_msg, reply_markup=None)
                context.user_data.pop('delete_mood_name', None)

            # Return to mood menu
            db.refresh(persona_config)
            return await edit_moods_menu(update, context, persona_config=persona_config)

    except SQLAlchemyError as e:
        logger.error(f"Database error deleting mood '{mood_name_to_delete}' for persona {persona_id}: {e}", exc_info=True)
        await query.edit_message_text(error_db, reply_markup=None)
        return await _try_return_to_mood_menu(update, context, user_id, persona_id)
    except Exception as e:
        logger.error(f"Error deleting mood '{mood_name_to_delete}' for persona {persona_id}: {e}", exc_info=True)
        await query.edit_message_text(error_general, reply_markup=None)
        return await _try_return_to_mood_menu(update, context, user_id, persona_id)


async def edit_persona_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = update.effective_message
    user_id = update.effective_user.id
    logger.info(f"User {user_id} cancelled persona edit/mood edit.")
    cancel_message = escape_markdown_v2("—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    try:
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            if query.message and query.message.text != cancel_message:
                await query.edit_message_text(cancel_message, reply_markup=None)
        elif message:
            await message.reply_text(cancel_message, reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        logger.warning(f"Error sending cancellation confirmation for user {user_id}: {e}")
        if message:
            try:
                await context.bot.send_message(chat_id=message.chat.id, text=cancel_message, reply_markup=ReplyKeyboardRemove())
            except Exception as send_e:
                logger.error(f"Failed to send fallback cancel message: {send_e}")

    context.user_data.clear()
    return ConversationHandler.END


# --- Delete Persona Conversation ---
async def _start_delete_convo(update: Update, context: ContextTypes.DEFAULT_TYPE, persona_id: int) -> int:
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id if update.effective_chat else update.effective_message.chat_id

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    context.user_data.clear()

    error_not_found = escape_markdown_v2("–ª–∏—á–Ω–æ—Å—Ç—å —Å id `{id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Ç–≤–æ—è.") # Placeholder
    error_db = escape_markdown_v2("–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    error_general = escape_markdown_v2("–Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
    prompt_delete = r"""
üö® **–í–ù–ò–ú–ê–ù–ò–ï\!** üö®
—É–¥–∞–ª–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å **'{name}'** \(id: `{id}`\)\?

—ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ **–ù–ï–û–ë–†–ê–¢–ò–ú–û**\!
    """ # Placeholder

    try:
        with next(get_db()) as db:
            persona_config = get_persona_by_id_and_owner(db, user_id, persona_id)
            if not persona_config:
                 final_error_msg = error_not_found.format(id=persona_id)
                 if update.callback_query: await update.callback_query.edit_message_text(final_error_msg)
                 else: await update.effective_message.reply_text(final_error_msg)
                 return ConversationHandler.END

            context.user_data['delete_persona_id'] = persona_id
            # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
            keyboard = [
                 [InlineKeyboardButton(f"‚ÄºÔ∏è –î–ê, –£–î–ê–õ–ò–¢–¨ '{persona_config.name}' ‚ÄºÔ∏è", callback_data=f"delete_persona_confirm_{persona_id}")],
                 [InlineKeyboardButton("‚ùå –ù–ï–¢, –û–°–¢–ê–í–ò–¢–¨", callback_data="delete_persona_cancel")]
             ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            msg_text = prompt_delete.format(name=escape_markdown_v2(persona_config.name), id=persona_id)

            if update.callback_query:
                 query = update.callback_query
                 try:
                      if query.message.text != msg_text or query.message.reply_markup != reply_markup:
                           await query.edit_message_text(msg_text, reply_markup=reply_markup)
                      else:
                           await query.answer()
                 except Exception as edit_err:
                      logger.warning(f"Could not edit message for delete start (persona {persona_id}): {edit_err}. Sending new message.")
                      await context.bot.send_message(chat_id, msg_text, reply_markup=reply_markup)
            else:
                 await update.effective_message.reply_text(msg_text, reply_markup=reply_markup)

            logger.info(f"User {user_id} initiated delete for persona {persona_id}. Asking confirmation.")
            return DELETE_PERSONA_CONFIRM
    except SQLAlchemyError as e:
         logger.error(f"Database error starting delete persona {persona_id}: {e}", exc_info=True)
         await context.bot.send_message(chat_id, error_db)
         return ConversationHandler.END
    except Exception as e:
         logger.error(f"Unexpected error starting delete persona {persona_id}: {e}", exc_info=True)
         await context.bot.send_message(chat_id, error_general)
         return ConversationHandler.END


async def delete_persona_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message: return ConversationHandler.END
    user_id = update.effective_user.id
    args = context.args
    logger.info(f"CMD /deletepersona < User {user_id} with args: {args}")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
    usage_text = r"—É–∫–∞–∂–∏ id –ª–∏—á–Ω–æ—Å—Ç–∏: `/deletepersona <id>`\n–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –∏–∑ /mypersonas"
    error_invalid_id = escape_markdown_v2("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    if not args or not args[0].isdigit():
        await update.message.reply_text(usage_text)
        return ConversationHandler.END
    try:
        persona_id = int(args[0])
    except ValueError:
        await update.message.reply_text(error_invalid_id)
        return ConversationHandler.END
    return await _start_delete_convo(update, context, persona_id)


async def delete_persona_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if not query or not query.data: return ConversationHandler.END
    await query.answer("–ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ...") # Plain text
    error_invalid_id = escape_markdown_v2("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ª–∏—á–Ω–æ—Å—Ç–∏ –≤ –∫–Ω–æ–ø–∫–µ.")
    try:
        persona_id = int(query.data.split('_')[-1])
        logger.info(f"CALLBACK delete_persona < User {query.from_user.id} for persona_id: {persona_id}")
        return await _start_delete_convo(update, context, persona_id)
    except (IndexError, ValueError):
        logger.error(f"Could not parse persona_id from delete_persona callback data: {query.data}")
        await query.edit_message_text(error_invalid_id)
        return ConversationHandler.END


async def delete_persona_confirmed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if not query or not query.data: return DELETE_PERSONA_CONFIRM

    data = query.data
    user_id = query.from_user.id
    persona_id = context.user_data.get('delete_persona_id')

    logger.info(f"--- delete_persona_confirmed: User={user_id}, PersonaID={persona_id}, Data={data} ---")

    error_no_session = escape_markdown_v2("–æ—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ —Å–µ—Å—Å–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞.")
    error_delete_failed = escape_markdown_v2("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å (–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö).")
    success_deleted = escape_markdown_v2("‚úÖ –ª–∏—á–Ω–æ—Å—Ç—å '{name}' —É–¥–∞–ª–µ–Ω–∞.") # Placeholder

    expected_pattern = f"delete_persona_confirm_{persona_id}"
    if not persona_id or data != expected_pattern:
         logger.warning(f"User {user_id}: Mismatch or missing ID in delete_persona_confirmed. ID='{persona_id}', Data='{data}'")
         await query.answer("–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏", show_alert=True) # Plain text
         await query.edit_message_text(error_no_session, reply_markup=None)
         context.user_data.clear()
         return ConversationHandler.END

    await query.answer("–£–¥–∞–ª—è–µ–º...") # Plain text

    logger.warning(f"User {user_id} CONFIRMED DELETION of persona {persona_id}.")
    deleted_ok = False
    persona_name_deleted = f"ID {persona_id}"
    try:
        with next(get_db()) as db:
             user = get_or_create_user(db, user_id)
             persona_to_delete = db.query(PersonaConfig).filter(PersonaConfig.id == persona_id, PersonaConfig.owner_id == user.id).first()
             if persona_to_delete:
                 persona_name_deleted = persona_to_delete.name
                 logger.info(f"Attempting database deletion for persona {persona_id} ('{persona_name_deleted}')...")
                 if delete_persona_config(db, persona_id, user.id):
                     logger.info(f"User {user_id} successfully deleted persona {persona_id} ('{persona_name_deleted}').")
                     deleted_ok = True
                 else:
                     logger.error(f"delete_persona_config returned False for persona {persona_id}, user internal ID {user.id}.")
             else:
                 logger.warning(f"User {user_id} confirmed delete, but persona {persona_id} not found (maybe already deleted). Assuming OK.")
                 deleted_ok = True

    except SQLAlchemyError as e:
        logger.error(f"Database error during delete_persona_confirmed fetch/delete for {persona_id}: {e}", exc_info=True)
    except Exception as e:
        logger.error(f"Unexpected error during delete_persona_confirmed for {persona_id}: {e}", exc_info=True)

    if deleted_ok:
        final_success_msg = success_deleted.format(name=escape_markdown_v2(persona_name_deleted))
        await query.edit_message_text(final_success_msg, reply_markup=None)
    else:
        await query.edit_message_text(error_delete_failed, reply_markup=None)

    context.user_data.clear()
    return ConversationHandler.END


async def delete_persona_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if not query: return ConversationHandler.END
    await query.answer() # Plain text
    user_id = query.from_user.id
    persona_id = context.user_data.get('delete_persona_id', 'N/A')
    logger.info(f"User {user_id} cancelled deletion for persona {persona_id}.")
    cancel_message = escape_markdown_v2("—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await query.edit_message_text(cancel_message, reply_markup=None)
    context.user_data.clear()
    return ConversationHandler.END


async def mute_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message: return
    chat_id = str(update.effective_chat.id)
    user_id = update.effective_user.id
    logger.info(f"CMD /mutebot < User {user_id} in Chat {chat_id}")

    error_no_persona = escape_markdown_v2("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏.")
    error_not_owner = escape_markdown_v2("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ª–∏—á–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –µ–µ –∑–∞–≥–ª—É—à–∏—Ç—å.")
    error_no_instance = escape_markdown_v2("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç —Å–≤—è–∑–∏ —Å —á–∞—Ç–æ–º.")
    error_db = escape_markdown_v2("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≥–ª—É—à–∏—Ç—å –±–æ—Ç–∞.")
    error_general = escape_markdown_v2("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")
    info_already_muted = escape_markdown_v2("–õ–∏—á–Ω–æ—Å—Ç—å '{name}' —É–∂–µ –∑–∞–≥–ª—É—à–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.") # Placeholder
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string
    success_muted = r"‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å '{name}' –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ \(–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\)\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unmutebot, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å\." # Placeholder

    with next(get_db()) as db:
        try:
            instance_info = get_persona_and_context_with_owner(chat_id, db)
            if not instance_info:
                await update.message.reply_text(error_no_persona, reply_markup=ReplyKeyboardRemove())
                return

            persona, _, owner_user = instance_info
            chat_instance = persona.chat_instance

            if owner_user.telegram_id != user_id and not is_admin(user_id):
                logger.warning(f"User {user_id} tried to mute persona '{persona.name}' owned by {owner_user.telegram_id} in chat {chat_id}.")
                await update.message.reply_text(error_not_owner, reply_markup=ReplyKeyboardRemove())
                return

            if not chat_instance:
                logger.error(f"Could not find ChatBotInstance object for persona {persona.name} in chat {chat_id} during mute.")
                await update.message.reply_text(error_no_instance, reply_markup=ReplyKeyboardRemove())
                return

            if not chat_instance.is_muted:
                chat_instance.is_muted = True
                db.commit()
                logger.info(f"Persona '{persona.name}' muted in chat {chat_id} by user {user_id}.")
                final_success_msg = success_muted.format(name=escape_markdown_v2(persona.name))
                await update.message.reply_text(final_success_msg, reply_markup=ReplyKeyboardRemove())
            else:
                final_already_muted_msg = info_already_muted.format(name=escape_markdown_v2(persona.name))
                await update.message.reply_text(final_already_muted_msg, reply_markup=ReplyKeyboardRemove())

        except SQLAlchemyError as e:
            logger.error(f"Database error during /mutebot for chat {chat_id}: {e}", exc_info=True)
            await update.message.reply_text(error_db)
        except Exception as e:
            logger.error(f"Unexpected error during /mutebot for chat {chat_id}: {e}", exc_info=True)
            await update.message.reply_text(error_general)


async def unmute_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message: return
    chat_id = str(update.effective_chat.id)
    user_id = update.effective_user.id
    logger.info(f"CMD /unmutebot < User {user_id} in Chat {chat_id}")

    error_no_persona = escape_markdown_v2("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ —Ä–∞–∑–º—å—é—Ç–∏—Ç—å.")
    error_not_owner = escape_markdown_v2("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ª–∏—á–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —Å–Ω—è—Ç—å –∑–∞–≥–ª—É—à–∫—É.")
    error_db = escape_markdown_v2("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–µ—Ä–Ω—É—Ç—å –±–æ—Ç–∞ –∫ –æ–±—â–µ–Ω–∏—é.")
    error_general = escape_markdown_v2("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")
    info_not_muted = escape_markdown_v2("–õ–∏—á–Ω–æ—Å—Ç—å '{name}' –Ω–µ –±—ã–ª–∞ –∑–∞–≥–ª—É—à–µ–Ω–∞.") # Placeholder
    success_unmuted = escape_markdown_v2("‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å '{name}' —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ.") # Placeholder

    with next(get_db()) as db:
        try:
            # Fetch the active instance directly
            active_instance = db.query(ChatBotInstance)\
                .options(
                    joinedload(ChatBotInstance.bot_instance_ref)
                    .joinedload(BotInstance.owner),
                    joinedload(ChatBotInstance.bot_instance_ref)
                    .joinedload(BotInstance.persona_config)
                )\
                .filter(ChatBotInstance.chat_id == chat_id, ChatBotInstance.active == True)\
                .first()

            if not active_instance:
                await update.message.reply_text(error_no_persona, reply_markup=ReplyKeyboardRemove())
                return

            # Check ownership
            owner_user = active_instance.bot_instance_ref.owner
            persona_name = active_instance.bot_instance_ref.persona_config.name if active_instance.bot_instance_ref and active_instance.bot_instance_ref.persona_config else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"
            escaped_persona_name = escape_markdown_v2(persona_name)

            if owner_user.telegram_id != user_id and not is_admin(user_id):
                logger.warning(f"User {user_id} tried to unmute persona '{persona_name}' owned by {owner_user.telegram_id} in chat {chat_id}.")
                await update.message.reply_text(error_not_owner, reply_markup=ReplyKeyboardRemove())
                return

            # Perform unmute
            if active_instance.is_muted:
                active_instance.is_muted = False
                db.commit()
                logger.info(f"Persona '{persona_name}' unmuted in chat {chat_id} by user {user_id}.")
                final_success_msg = success_unmuted.format(name=escaped_persona_name)
                await update.message.reply_text(final_success_msg, reply_markup=ReplyKeyboardRemove())
            else:
                final_not_muted_msg = info_not_muted.format(name=escaped_persona_name)
                await update.message.reply_text(final_not_muted_msg, reply_markup=ReplyKeyboardRemove())

        except SQLAlchemyError as e:
            logger.error(f"Database error during /unmutebot for chat {chat_id}: {e}", exc_info=True)
            await update.message.reply_text(error_db)
        except Exception as e:
            logger.error(f"Unexpected error during /unmutebot for chat {chat_id}: {e}", exc_info=True)
            await update.message.reply_text(error_general)
