import logging
import httpx
import random
import asyncio
import re
import uuid
import json
from datetime import datetime, timezone, timedelta
from telegram import Update, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction, ParseMode
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters, CallbackQueryHandler
)
from telegram.error import BadRequest # –î–ª—è –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
from telegram.helpers import escape_markdown # –î–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ MarkdownV2

from sqlalchemy.orm import Session, joinedload
from sqlalchemy.orm.attributes import flag_modified
from sqlalchemy.exc import IntegrityError, SQLAlchemyError
from sqlalchemy import func
from typing import List, Dict, Any, Optional, Union, Tuple

from yookassa import Configuration as YookassaConfig
from yookassa import Payment
from yookassa.domain.models.currency import Currency
from yookassa.domain.request.payment_request_builder import PaymentRequestBuilder
from yookassa.domain.models.receipt import Receipt, ReceiptItem


# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç –≤—Å–µ–≥–æ –º–æ–¥—É–ª—è config
import config

from db import (
    get_context_for_chat_bot, add_message_to_context,
    set_mood_for_chat_bot, get_mood_for_chat_bot, get_or_create_user,
    create_persona_config, get_personas_by_owner, get_persona_by_name_and_owner,
    get_persona_by_id_and_owner, check_and_update_user_limits, activate_subscription,
    create_bot_instance, link_bot_instance_to_chat, delete_persona_config,
    get_db, get_active_chat_bot_instance_with_relations, SessionLocal, # –î–æ–±–∞–≤–ª–µ–Ω SessionLocal
    User, PersonaConfig, BotInstance, ChatBotInstance, ChatContext
)
from persona import Persona
from utils import postprocess_response, extract_gif_links, get_time_info

logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    return user_id == config.ADMIN_USER_ID

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
EDIT_PERSONA_CHOICE, EDIT_FIELD, EDIT_MOOD_CHOICE, EDIT_MOOD_NAME, EDIT_MOOD_PROMPT, DELETE_MOOD_CONFIRM, DELETE_PERSONA_CONFIRM, EDIT_MAX_MESSAGES = range(8)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
FIELD_MAP = {
    "name": "–∏–º—è",
    "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
    "system_prompt_template": "—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
    "should_respond_prompt_template": "–ø—Ä–æ–º–ø—Ç '–æ—Ç–≤–µ—á–∞—Ç—å?'",
    "spam_prompt_template": "–ø—Ä–æ–º–ø—Ç —Å–ø–∞–º–∞",
    "photo_prompt_template": "–ø—Ä–æ–º–ø—Ç —Ñ–æ—Ç–æ",
    "voice_prompt_template": "–ø—Ä–æ–º–ø—Ç –≥–æ–ª–æ—Å–∞",
    "max_response_messages": "–º–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç–µ"
}

# –¢–µ–∫—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è
# –ò—Å–ø–æ–ª—å–∑—É–µ–º f-string –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä—è–º–æ –∑–¥–µ—Å—å
TOS_TEXT = f"""
**üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –°–µ—Ä–≤–∏—Å–∞ @NunuAiBot**

–ü—Ä–∏–≤–µ—Ç\! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ @NunuAiBot\! –ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏\. –≠—Ç–æ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ ‚Äî –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è—Å–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –°–µ—Ä–≤–∏—Å–∞\. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\.

–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 01\.03\.2025

**1\. –û —á–µ–º —ç—Ç–æ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ?**
1\.1\. –≠—Ç–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ \(–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–°–æ–≥–ª–∞—à–µ–Ω–∏–µ"\) ‚Äî –¥–æ–≥–æ–≤–æ—Ä –º–µ–∂–¥—É –≤–∞–º–∏ \(–¥–∞–ª–µ–µ ‚Äì "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" –∏–ª–∏ "–í—ã"\) –∏ –Ω–∞–º–∏ \(–≤–ª–∞–¥–µ–ª—å—Ü–µ–º Telegram\-–±–æ—Ç–∞ @NunuAiBot, –¥–∞–ª–µ–µ ‚Äì "–°–µ—Ä–≤–∏—Å" –∏–ª–∏ "–ú—ã"\)\. –û–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –°–µ—Ä–≤–∏—Å–∞\.
1\.2\. –ù–∞—á–∏–Ω–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à –°–µ—Ä–≤–∏—Å \(–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É\), –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∏, –ø–æ–Ω—è–ª–∏ –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å–æ –≤—Å–µ–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ —ç—Ç–æ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è\. –ï—Å–ª–∏ –í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Ö–æ—Ç—è –±—ã —Å –æ–¥–Ω–∏–º –ø—É–Ω–∫—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –°–µ—Ä–≤–∏—Å–∞\.
1\.3\. –ù–∞—à –°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –æ–±—â–∞—Ç—å—Å—è —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏ –Ω–∞ –±–∞–∑–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ \(–¥–∞–ª–µ–µ ‚Äì "–õ–∏—á–Ω–æ—Å—Ç–∏" –∏–ª–∏ "AI\-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏"\)\.

**2\. –ü—Ä–æ –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ–ø–ª–∞—Ç—É**
2\.1\. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–≤–∞ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ Premium \(–ø–ª–∞—Ç–Ω—ã–π\)\. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ª–∏–º–∏—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞–Ω—ã –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –∫–æ–º–∞–Ω–¥–∞—Ö `/profile` –∏ `/subscribe`\.
2\.2\. –ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –í–∞–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –ø–µ—Ä–∏–æ–¥ –≤ {config.SUBSCRIPTION_DURATION_DAYS} –¥–Ω–µ–π\.
2\.3\. –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {config.SUBSCRIPTION_PRICE_RUB:.0f} {config.SUBSCRIPTION_CURRENCY} –∑–∞ {config.SUBSCRIPTION_DURATION_DAYS} –¥–Ω–µ–π\.
2\.4\. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É Yookassa\. –í–∞–∂–Ω–æ: –º—ã –Ω–µ –ø–æ–ª—É—á–∞–µ–º –∏ –Ω–µ —Ö—Ä–∞–Ω–∏–º –í–∞—à–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ \(–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ —Ç\.–ø\.\)\. –í—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ\.
2\.5\. **–ü–æ–ª–∏—Ç–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤:** –ü–æ–∫—É–ø–∞—è –ø–æ–¥–ø–∏—Å–∫—É, –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –°–µ—Ä–≤–∏—Å–∞ —Å—Ä–∞–∑—É –∂–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\. –ü–æ—Å–∫–æ–ª—å–∫—É –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É—Å–ª—É–≥—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç—É–ø–∞, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, **–Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É**\.
2\.6\. –í —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö, –µ—Å–ª–∏ –°–µ—Ä–≤–∏—Å –æ–∫–∞–∂–µ—Ç—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –Ω–∞—à–µ–π –≤–∏–Ω–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ \(–±–æ–ª–µ–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\), –∏ —É –í–∞—Å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É \(–∫–æ–Ω—Ç–∞–∫—Ç —É–∫–∞–∑–∞–Ω –≤ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –±–æ—Ç–∞ –∏ –≤ –Ω–∞—à–µ–º Telegram\-–∫–∞–Ω–∞–ª–µ\)\. –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–ª–∏—Ç—å –í–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å—Ä–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –°–µ—Ä–≤–∏—Å–∞\. –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ\.

**3\. –í–∞—à–∏ –∏ –Ω–∞—à–∏ –ø—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏**
3\.1\. –ß—Ç–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç –í–∞—Å \(–í–∞—à–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏\):
*   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –°–µ—Ä–≤–∏—Å —Ç–æ–ª—å–∫–æ –≤ –∑–∞–∫–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –Ω–∏–∫–∞–∫–∏–µ –∑–∞–∫–æ–Ω—ã –ø—Ä–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏\.
*   –ù–µ –ø—ã—Ç–∞—Ç—å—Å—è –≤–º–µ—à–∞—Ç—å—Å—è –≤ —Ä–∞–±–æ—Ç—É –°–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø\.
*   –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–ø–∞–º–∞, –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –∏–ª–∏ –ª—é–±–æ–π –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\.
*   –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è \(–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ–ø–ª–∞—Ç—ã\), –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—É—é –∏ –ø—Ä–∞–≤–¥–∏–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\.
*   –ü–æ—Å–∫–æ–ª—å–∫—É —É –°–µ—Ä–≤–∏—Å–∞ –Ω–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è\.
3\.2\. –ß—Ç–æ –º–æ–∂–µ–º –¥–µ–ª–∞—Ç—å –º—ã \(–ù–∞—à–∏ –ø—Ä–∞–≤–∞\):
*   –ú—ã –º–æ–∂–µ–º –º–µ–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è —ç—Ç–æ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è\. –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –º—ã —É–≤–µ–¥–æ–º–∏–º –í–∞—Å, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–≤ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –°–æ–≥–ª–∞—à–µ–Ω–∏—è –≤ –Ω–∞—à–µ–º Telegram\-–∫–∞–Ω–∞–ª–µ –∏–ª–∏ –∏–Ω—ã–º –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –≤ —Ä–∞–º–∫–∞—Ö –°–µ—Ä–≤–∏—Å–∞\. –í–∞—à–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –°–µ—Ä–≤–∏—Å–∞ –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏\.
*   –ú—ã –º–æ–∂–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –°–µ—Ä–≤–∏—Å—É, –µ—Å–ª–∏ –í—ã –Ω–∞—Ä—É—à–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —ç—Ç–æ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è\.
*   –ú—ã –º–æ–∂–µ–º –∏–∑–º–µ–Ω—è—Ç—å —Å–∞–º –°–µ—Ä–≤–∏—Å: –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–±–∏—Ä–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, –º–µ–Ω—è—Ç—å –ª–∏–º–∏—Ç—ã –∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏\.

**4\. –í–∞–∂–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏**
4\.1\. –°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è "–∫–∞–∫ –µ—Å—Ç—å"\. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –º—ã –Ω–µ –º–æ–∂–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –±–µ–∑ —Å–±–æ–µ–≤ –∏–ª–∏ –æ—à–∏–±–æ–∫\. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–Ω–æ–≥–¥–∞ –ø–æ–¥–≤–æ–¥—è—Ç, –∏ –º—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –≤–æ–∑–Ω–∏–∫—à–∏–µ –Ω–µ –ø–æ –Ω–∞—à–µ–π –ø—Ä—è–º–æ–π –≤–∏–Ω–µ\.
4\.2\. –ü–æ–º–Ω–∏—Ç–µ, –õ–∏—á–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç\. –ò—Ö –æ—Ç–≤–µ—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º–∏, –Ω–µ–ø–æ–ª–Ω—ã–º–∏, —Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –í–∞—à–∏–º –æ–∂–∏–¥–∞–Ω–∏—è–º –∏–ª–∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏\. –ú—ã –Ω–µ –Ω–µ—Å–µ–º –Ω–∏–∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö AI\-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏\. –ù–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∏—Ö –∫–∞–∫ –∏—Å—Ç–∏–Ω—É –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç\.
4\.3\. –ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ –ø—Ä—è–º—ã–µ –∏–ª–∏ –∫–æ—Å–≤–µ–Ω–Ω—ã–µ —É–±—ã—Ç–∫–∏ –∏–ª–∏ —É—â–µ—Ä–±, –∫–æ—Ç–æ—Ä—ã–π –í—ã –º–æ–≥–ª–∏ –ø–æ–Ω–µ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è \(–∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\) –°–µ—Ä–≤–∏—Å–∞\.

**5\. –ü—Ä–æ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ \(–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\)**
5\.1\. –î–ª—è —Ä–∞–±–æ—Ç—ã –°–µ—Ä–≤–∏—Å–∞ –Ω–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è —Å–æ–±–∏—Ä–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –í–∞—à Telegram ID \(–¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞\), –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram \(username, –µ—Å–ª–∏ –µ—Å—Ç—å\), –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –í–∞–º–∏ –õ–∏—á–Ω–æ—Å—Ç—è—Ö, –∞ —Ç–∞–∫–∂–µ –∏—Å—Ç–æ—Ä–∏—é –í–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –õ–∏—á–Ω–æ—Å—Ç—è–º–∏ \(—ç—Ç–æ –Ω—É–∂–Ω–æ AI –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\)\.
5\.2\. –ú—ã –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –í–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –ø–µ—Ä–µ–¥–∞—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π\.

**6\. –î–µ–π—Å—Ç–≤–∏–µ –°–æ–≥–ª–∞—à–µ–Ω–∏—è**
6\.1\. –ù–∞—Å—Ç–æ—è—â–µ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–æ–º–µ–Ω—Ç–∞, –∫–∞–∫ –í—ã –≤–ø–µ—Ä–≤—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –°–µ—Ä–≤–∏—Å, –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –º–æ–º–µ–Ω—Ç–∞, –ø–æ–∫–∞ –í—ã –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç–µ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –ø–æ–∫–∞ –°–µ—Ä–≤–∏—Å –Ω–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É\.

**7\. –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å**
7\.1\. –í—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç \(—Ç–µ–∫—Å—Ç\), –∫–æ—Ç–æ—Ä—ã–π –í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –∏ –≤–≤–æ–¥–∏—Ç–µ –≤ –°–µ—Ä–≤–∏—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AI\-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏\.
7\.2\. –í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –Ω–∞–º –Ω–µ–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—É—é, –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω—É—é, –¥–µ–π—Å—Ç–≤—É—é—â—É—é –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ü–µ–ª—è—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –°–µ—Ä–≤–∏—Å–∞ \(–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –í–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞, –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ\)\.
7\.3\. –í—Å–µ –ø—Ä–∞–≤–∞ –Ω–∞ —Å–∞–º –°–µ—Ä–≤–∏—Å \(–∫–æ–¥ –±–æ—Ç–∞, –¥–∏–∑–∞–π–Ω, –Ω–∞–∑–≤–∞–Ω–∏–µ, –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Ç\.–¥\.\) –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É –°–µ—Ä–≤–∏—Å–∞\.
7\.4\. –û—Ç–≤–µ—Ç—ã, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ AI\-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏, —è–≤–ª—è—é—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞\. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –ª–∏—á–Ω—ã—Ö –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö, –Ω–æ –ø—Ä–∏–∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –æ–Ω–∏ —Å–æ–∑–¥–∞–Ω—ã –º–∞—à–∏–Ω–æ–π –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –í–∞—à–µ–π –∏–ª–∏ –Ω–∞—à–µ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏\.

**8\. –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è**
8\.1\. –í—Å–µ —Å–ø–æ—Ä—ã –∏ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è —Ä–µ—à–∞—é—Ç—Å—è –ø—É—Ç–µ–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤\. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, —Å–ø–æ—Ä—ã –±—É–¥—É—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏\.
8\.2\. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º, –∫–∞—Å–∞—é—â–∏–º—Å—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è –∏–ª–∏ —Ä–∞–±–æ—Ç—ã –°–µ—Ä–≤–∏—Å–∞, –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –±–æ—Ç–∞ –∏ –≤ –Ω–∞—à–µ–º Telegram\-–∫–∞–Ω–∞–ª–µ\.
"""


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ."""
    logger.error("Exception while handling an update:", exc_info=context.error)
    if isinstance(update, Update) and update.effective_message:
        err_text = "—É–ø—Å... –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º escape_markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            await update.effective_message.reply_text(escape_markdown(err_text, version=2), parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e:
            logger.error(f"Failed to send error message to user: {e}")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_persona_and_context_with_owner(chat_id: str, db: Session) -> Optional[Tuple[Persona, List[Dict[str, str]], User]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ü–µ—Ä—Å–æ–Ω—É, –µ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ (User) –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ chat_id."""
    try:
        chat_instance = get_active_chat_bot_instance_with_relations(db, chat_id)
        if not chat_instance: logger.debug(f"No active chatbot instance for chat {chat_id}"); return None
        bot_instance = chat_instance.bot_instance_ref
        if not bot_instance or not bot_instance.persona_config or not bot_instance.owner: logger.error(f"ChatBotInstance {chat_instance.id} missing linked data."); return None
        persona_config = bot_instance.persona_config; owner_user = bot_instance.owner
        persona = Persona(persona_config, chat_instance)
        context_list = get_context_for_chat_bot(db, chat_instance.id)
        return persona, context_list, owner_user
    except ValueError as e: logger.error(f"Persona init failed: {e}", exc_info=True); return None
    except SQLAlchemyError as e: logger.error(f"DB error in get_persona_...: {e}", exc_info=True); return None
    except Exception as e: logger.error(f"Unexpected error in get_persona_...: {e}", exc_info=True); return None

async def send_to_langdock(system_prompt: str, messages: List[Dict[str, str]]) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Langdock API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç."""
    if not config.LANGDOCK_API_KEY: logger.error("LANGDOCK_API_KEY missing."); return "–æ—à–∏–±–∫–∞: –∫–ª—é—á api –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
    headers = {"Authorization": f"Bearer {config.LANGDOCK_API_KEY}", "Content-Type": "application/json"}
    messages_to_send = messages[-config.MAX_CONTEXT_MESSAGES_SENT_TO_LLM:]
    payload = {"model": config.LANGDOCK_MODEL, "system": system_prompt, "messages": messages_to_send, "max_tokens": 1024, "temperature": 0.75, "top_p": 0.95, "stream": False}
    url = f"{config.LANGDOCK_BASE_URL.rstrip('/')}/v1/messages"
    logger.debug(f"Sending request to Langdock: {url} with {len(messages_to_send)} messages.")
    try:
        async with httpx.AsyncClient(timeout=60.0) as client: resp = await client.post(url, json=payload, headers=headers)
        logger.debug(f"Langdock response status: {resp.status_code}"); resp.raise_for_status(); data = resp.json()
        logger.debug(f"Langdock response data (first 200 chars): {str(data)[:200]}")
        full_response = ""; content = data.get("content")
        if isinstance(content, list): full_response = " ".join([p.get("text", "") for p in content if p.get("type") == "text"])
        elif isinstance(content, dict) and "text" in content: full_response = content["text"]
        elif "choices" in data and isinstance(data["choices"], list) and data["choices"]: choice = data["choices"][0]; message = choice.get("message"); full_response = message["content"] if isinstance(message, dict) and "content" in message else choice.get("text", "")
        elif isinstance(data.get("response"), str): full_response = data["response"]
        if not full_response: logger.warning(f"Could not extract text from Langdock response: {data}"); return "—Ö–º, –Ω–µ —Å–º–æ–≥ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç ai..."
        return full_response.strip()
    except httpx.ReadTimeout: logger.error("Langdock timed out."); return "—Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –¥—É–º–∞–ª..."
    except httpx.HTTPStatusError as e: logger.error(f"Langdock HTTP error: {e.response.status_code} - {e.response.text}", exc_info=True); user_message = f"–æ–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å ai ({e.response.status_code})..."; return user_message
    except httpx.RequestError as e: logger.error(f"Langdock request error: {e}", exc_info=True); return "–Ω–µ –º–æ–≥—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å ai (—Å–µ—Ç—å)..."
    except json.JSONDecodeError as e: logger.error(f"Langdock JSON decode error: {e}. Resp: {resp.text if 'resp' in locals() else 'N/A'}"); return "–ø–æ–ª—É—á–∏–ª –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç ai..."
    except Exception as e: logger.error(f"Unexpected error Langdock comm: {e}", exc_info=True); return "–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."

async def process_and_send_response(update: Optional[Update], context: ContextTypes.DEFAULT_TYPE, chat_id: str, persona: Persona, full_bot_response_text: str, db: Session):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç AI, –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if not full_bot_response_text or not full_bot_response_text.strip(): logger.warning(f"Empty AI response chat {chat_id}"); return
    logger.debug(f"Processing AI response chat {chat_id}, persona {persona.name}. Raw len: {len(full_bot_response_text)}")
    response_content_to_save = full_bot_response_text.strip()
    if persona.chat_instance:
        try: add_message_to_context(db, persona.chat_instance.id, "assistant", response_content_to_save); logger.debug("AI response staged.")
        except SQLAlchemyError as e: logger.error(f"Re-raising DB Error context add assist {persona.chat_instance.id}."); raise
        except Exception as e: logger.error(f"Unexpected Error context add assist {persona.chat_instance.id}: {e}", exc_info=True); raise
    else: logger.error(f"No chat_instance for persona {persona.name} context add."); raise ValueError(f"Internal state error: chat_instance None")
    all_text_content = response_content_to_save; gif_links = extract_gif_links(all_text_content)
    for gif in gif_links: all_text_content = re.sub(re.escape(gif), "", all_text_content, flags=re.IGNORECASE).strip()
    text_parts_to_send = postprocess_response(all_text_content); logger.debug(f"Postprocessed into {len(text_parts_to_send)} parts.")
    max_messages=3; try: max_messages = persona.config.max_response_messages if persona.config and isinstance(persona.config.max_response_messages, int) and 1<=persona.config.max_response_messages<=10 else 3
    except Exception as e: logger.error(f"Error getting max_response_messages: {e}. Defaulting 3.")
    if len(text_parts_to_send) > max_messages: logger.info(f"Limiting response parts {len(text_parts_to_send)}->{max_messages}"); text_parts_to_send = text_parts_to_send[:max_messages]; text_parts_to_send[-1] += "..." if text_parts_to_send else ""
    gif_send_tasks = []; [gif_send_tasks.append(context.bot.send_animation(chat_id=chat_id, animation=gif_url)) for gif_url in gif_links]; await asyncio.gather(*gif_send_tasks, return_exceptions=True) if gif_send_tasks else None
    if text_parts_to_send:
        is_group_chat = update and update.effective_chat and update.effective_chat.type in ["group", "supergroup"]
        for i, part in enumerate(text_parts_to_send):
            part = part.strip();
            if not part: continue
            if is_group_chat: try: await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING); await asyncio.sleep(random.uniform(0.8, 1.5)) except Exception as e: logger.warning(f"Typing action fail {chat_id}: {e}")
            try:
                logger.debug(f"Sending part {i+1}/{len(text_parts_to_send)} chat {chat_id}: '{part[:50]}...'")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–æ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ AI –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, —Ç.–∫. –æ–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É
                await context.bot.send_message(chat_id=chat_id, text=part, parse_mode=ParseMode.MARKDOWN_V2)
            except BadRequest as e: # –ï—Å–ª–∏ LLM –≤—ã–¥–∞–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É
                if "can't parse entities" in str(e).lower():
                    logger.warning(f"Invalid MarkdownV2 from LLM, sending as plain text. Error: {e}")
                    try: await context.bot.send_message(chat_id=chat_id, text=part) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                    except Exception as send_plain_e: logger.error(f"Failed to send plain text part {i+1} chat {chat_id}: {send_plain_e}", exc_info=True); break
                else: logger.error(f"Send text part {i+1} BadRequest {chat_id}: {e}", exc_info=True); break # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ BadRequest
            except Exception as e: logger.error(f"Send text part {i+1} fail {chat_id}: {e}", exc_info=True); break
            if i < len(text_parts_to_send) - 1: await asyncio.sleep(random.uniform(0.4, 0.9))

async def send_limit_exceeded_message(update: Update, context: ContextTypes.DEFAULT_TYPE, user: User):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞."""
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2
    text = (
        f"—É–ø—Å\! üòï –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π \({user.daily_message_count}/{user.message_limit}\) –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç\.\n\n"
        f"‚ú® **—Ö–æ—á–µ—à—å –±–µ–∑–ª–∏–º–∏—Ç–∞?** ‚ú®\n"
        f"–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞ {config.SUBSCRIPTION_PRICE_RUB:.0f} {config.SUBSCRIPTION_CURRENCY}/–º–µ—Å –¥–∞–µ—Ç:\n"
        f"‚úÖ **{config.PAID_DAILY_MESSAGE_LIMIT}** —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n"
        f"‚úÖ –¥–æ **{config.PAID_PERSONA_LIMIT}** –ª–∏—á–Ω–æ—Å—Ç–µ–π\n"
        f"‚úÖ –ø–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π\n\n"
        "üëá –∂–º–∏ /subscribe –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\!"
    )
    keyboard = [[InlineKeyboardButton("üöÄ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!", callback_data="subscribe_info")]]; reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        target_chat_id = update.effective_chat.id;
        if target_chat_id: await context.bot.send_message(target_chat_id, text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
        else: logger.warning(f"No chat for limit msg user {user.telegram_id}.")
    except Exception as e: logger.error(f"Failed send limit msg user {user.telegram_id}: {e}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not update.message or not (update.message.text or update.message.caption): return
    chat_id = str(update.effective_chat.id); user_id = update.effective_user.id; username = update.effective_user.username or f"user_{user_id}"; message_text = (update.message.text or update.message.caption or "").strip()
    if not message_text: return
    logger.info(f"MSG < User {user_id} ({username}) Chat {chat_id}: {message_text[:100]}")
    with next(get_db()) as db:
        try:
            persona_info = get_persona_and_context_with_owner(chat_id, db)
            if not persona_info: logger.debug(f"No active persona chat {chat_id}"); return
            persona, _, owner = persona_info; logger.debug(f"Handling msg persona '{persona.name}' owner {owner.id} (TG:{owner.telegram_id})")
            can_send = check_and_update_user_limits(db, owner)
            if not can_send: logger.info(f"Owner {owner.telegram_id} limit hit"); await send_limit_exceeded_message(update, context, owner); return
            if persona.chat_instance: add_message_to_context(db, persona.chat_instance.id, "user", f"{username}: {message_text}"); logger.debug("User msg staged.")
            else: logger.error(f"No chat_instance persona {persona.name}"); await update.message.reply_text(escape_markdown("—Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
            if persona.chat_instance and persona.chat_instance.is_muted: logger.debug(f"Persona '{persona.name}' muted chat {chat_id}"); db.commit(); logger.info(f"Committed changes muted persona {persona.name}."); return
            moods=persona.get_all_mood_names(); matched_mood=next((m for m in moods if m.lower()==message_text.lower()),None)
            if matched_mood: logger.info(f"Msg matched mood '{matched_mood}'."); await mood(update, context); return
            should_respond=True; is_group=update.effective_chat.type in ["group","supergroup"]
            if is_group and persona.should_respond_prompt_template: prompt=persona.format_should_respond_prompt(message_text);
                if prompt: try: ctx=get_context_for_chat_bot(db,persona.chat_instance.id); decision=await send_to_langdock(prompt,ctx); ans=decision.strip().lower(); logger.debug(f"should_respond AI: '{ans}'"); should_respond=ans.startswith("–¥") except Exception as e: logger.error(f"should_respond LLM error: {e}",exc_info=True); should_respond=True
                else: should_respond=True
                if not should_respond: logger.debug(f"Not responding by AI decision."); db.commit(); logger.info(f"Committed changes no AI response."); return
            ctx_ai=get_context_for_chat_bot(db,persona.chat_instance.id);
            if ctx_ai is None: logger.error(f"Failed get context AI {persona.name}"); await update.message.reply_text(escape_markdown("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return; logger.debug(f"Got {len(ctx_ai)} msgs for AI.")
            sys_prompt=persona.format_system_prompt(user_id,username,message_text)
            if not sys_prompt or "–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" in sys_prompt: logger.error(f"Sys prompt format fail {persona.name}. Prompt: '{sys_prompt}'"); await update.message.reply_text(escape_markdown("–æ—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2); db.commit(); logger.info(f"Committed changes prompt format fail."); return
            logger.debug(f"Formatted main sys prompt {persona.name}."); resp_text=await send_to_langdock(sys_prompt,ctx_ai); logger.debug(f"Got response: {resp_text[:100]}...")
            await process_and_send_response(update,context,chat_id,persona,resp_text,db)
            db.commit(); logger.info(f"Success handle_message commit chat {chat_id}, persona {persona.name}.")
        except SQLAlchemyError as e: logger.error(f"DB error handle_message: {e}", exc_info=True); try: await update.message.reply_text(escape_markdown("–æ—à–∏–±–∫–∞ –±–¥.", version=2), parse_mode=ParseMode.MARKDOWN_V2) except: pass
        except Exception as e: logger.error(f"General error handle_message chat {chat_id}: {e}", exc_info=True); try: await update.message.reply_text(escape_markdown("–Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2) except: pass

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ ---
async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE, media_type: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    if not update.message: return
    chat_id = str(update.effective_chat.id); user_id = update.effective_user.id; username = update.effective_user.username or f"user_{user_id}"
    logger.info(f"Received {media_type} user {user_id} ({username}) chat {chat_id}")
    with next(get_db()) as db:
        try:
            persona_info = get_persona_and_context_with_owner(chat_id, db)
            if not persona_info: return
            persona, _, owner = persona_info; logger.debug(f"Handling {media_type} persona '{persona.name}' owner {owner.id}")
            can_send = check_and_update_user_limits(db, owner)
            if not can_send: logger.info(f"Owner {owner.telegram_id} limit hit media."); await send_limit_exceeded_message(update, context, owner); return
            prompt_template=None; ctx_placeholder=""; sys_formatter=None
            if media_type=="photo": prompt_template=persona.photo_prompt_template; ctx_placeholder=f"{username}: –ø—Ä–∏—Å–ª–∞–ª(–∞) —Ñ–æ—Ç–æ."; sys_formatter=persona.format_photo_prompt
            elif media_type=="voice": prompt_template=persona.voice_prompt_template; ctx_placeholder=f"{username}: –ø—Ä–∏—Å–ª–∞–ª(–∞) –≥—Å."; sys_formatter=persona.format_voice_prompt
            else: logger.error(f"Unsupported media_type '{media_type}'"); return
            if persona.chat_instance: add_message_to_context(db, persona.chat_instance.id, "user", ctx_placeholder); logger.debug(f"Added media placeholder {media_type}.")
            else: logger.error(f"No chat_instance media {persona.name}"); if update.effective_message: await update.effective_message.reply_text(escape_markdown("—Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
            if persona.chat_instance and persona.chat_instance.is_muted: logger.debug(f"Persona '{persona.name}' muted media."); db.commit(); logger.info(f"Committed changes media muted."); return
            if not prompt_template or not sys_formatter: logger.info(f"Persona {persona.name} no {media_type} template."); db.commit(); logger.info(f"Committed changes media no template."); return
            ctx_ai=get_context_for_chat_bot(db, persona.chat_instance.id)
            if ctx_ai is None: logger.error(f"Failed get context AI media {persona.name}"); if update.effective_message: await update.effective_message.reply_text(escape_markdown("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
            sys_prompt=sys_formatter()
            if not sys_prompt or "–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" in sys_prompt: logger.error(f"Failed format {media_type} prompt {persona.name}. Prompt:'{sys_prompt}'"); if update.effective_message: await update.effective_message.reply_text(escape_markdown(f"–æ—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2); db.commit(); logger.info(f"Committed changes media prompt fail."); return
            logger.debug(f"Formatted {media_type} sys prompt."); resp_text=await send_to_langdock(sys_prompt,ctx_ai); logger.debug(f"Got response {media_type}: {resp_text[:100]}...")
            await process_and_send_response(update,context,chat_id,persona,resp_text,db)
            db.commit(); logger.info(f"Success handle_media {media_type} commit chat {chat_id}, persona {persona.name}.")
        except SQLAlchemyError as e: logger.error(f"DB error handle_media ({media_type}): {e}", exc_info=True); if update.effective_message: await update.effective_message.reply_text(escape_markdown("–æ—à–∏–±–∫–∞ –±–¥ –º–µ–¥–∏–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e: logger.error(f"General error handle_media {media_type} chat {chat_id}: {e}", exc_info=True); if update.effective_message: await update.effective_message.reply_text(escape_markdown("–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.photo: return; await handle_media(update, context, "photo")
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.voice: return; await handle_media(update, context, "voice")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /start, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π."""
    if not update.message: return
    user_id = update.effective_user.id; username = update.effective_user.username or f"id_{user_id}"; chat_id = str(update.effective_chat.id)
    logger.info(f"CMD /start < User {user_id} ({username}) Chat {chat_id}")
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    with next(get_db()) as db:
        try:
            user = get_or_create_user(db, user_id, username)
            persona_info_tuple = get_persona_and_context_with_owner(chat_id, db)
            reply_text = ""; keyboard = []; bot_username = context.bot_data.get('bot_username', 'NunuAiBot')
            escaped_bot_username = escape_markdown(f"@{bot_username}", version=2)

            if persona_info_tuple and update.effective_chat.type != 'private':
                persona, _, _ = persona_info_tuple
                escaped_persona_name = escape_markdown(persona.name, version=2)
                reply_text = f"–ø—Ä–∏–≤–µ—Ç\! —è {escaped_persona_name}\. —è —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ\.\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥\."
            else:
                check_and_update_user_limits(db, user)
                current_persona_count = db.query(func.count(PersonaConfig.id)).filter(PersonaConfig.owner_id == user.id).scalar() or 0
                db.commit(); logger.debug(f"Committed changes /start user {user_id}."); db.refresh(user)
                status = "‚≠ê Premium" if user.is_active_subscriber else "üÜì Free"; expires_text = f" –¥–æ {user.subscription_expires_at.strftime('%d.%m.%Y')}" if user.is_active_subscriber and user.subscription_expires_at else ""
                escaped_expires = escape_markdown(expires_text, version=2)
                reply_text = (
                    f"–ø—Ä–∏–≤–µ—Ç\! üëã —è {escaped_bot_username}, –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ai\-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤\.\n\n"
                    f"*—Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å:* **{escape_markdown(status, version=2)}**{escaped_expires}\n"
                    f"–ª–∏—á–Ω–æ—Å—Ç–∏: {current_persona_count}/{user.persona_limit} \| "
                    f"—Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è: {user.daily_message_count}/{user.message_limit}\n\n"
                    "—á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
                keyboard = [[InlineKeyboardButton("üë§ –ú–æ–∏ –ª–∏—á–Ω–æ—Å—Ç–∏", callback_data="show_my_personas")], [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å", callback_data="create_persona_info")], [InlineKeyboardButton("üõí –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscribe_info")]]
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else ReplyKeyboardRemove()
            await update.message.reply_text(reply_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
        except SQLAlchemyError as e: logger.error(f"DB error /start user {user_id}: {e}", exc_info=True); await update.message.reply_text(escape_markdown("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.", version=2), parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e: logger.error(f"Error /start user {user_id}: {e}", exc_info=True); await update.message.reply_text(escape_markdown("–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start.", version=2), parse_mode=ParseMode.MARKDOWN_V2)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    if not update.message: return
    user_id = update.effective_user.id; chat_id = str(update.effective_chat.id); is_private_chat = update.effective_chat.type == 'private'
    logger.info(f"CMD /help < User {user_id} Chat {chat_id}")
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    help_text_general = (
         "*ü§ñ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã \(–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–≥–¥–∞\):*\n"
         "`/start` \- –ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –∏ —Å—Ç–∞—Ç—É—Å\n"
         "`/help` \- –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
         "`/profile` \- –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ª–∏–º–∏—Ç—ã\n"
         "`/subscribe` \- –ò–Ω—Ñ–æ –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –æ–ø–ª–∞—Ç–∞\n"
         "`/mypersonas` \- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–≤–æ–∏–º–∏ –ª–∏—á–Ω–æ—Å—Ç—è–º–∏\n"
         "`/createpersona <–∏–º—è> [–æ–ø–∏—Å–∞–Ω–∏–µ]` \- –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–∏—á–Ω–æ—Å—Ç—å\n"
         "`/addbot <id>` \- –î–æ–±–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å –≤ *–≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç* \(ID –∏–∑ `/mypersonas`\)"
    )
    help_text_chat = (
         "\n\n*üí¨ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —á–∞—Ç–∞ \(–≥–¥–µ –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏—á–Ω–æ—Å—Ç—å\):*\n"
         "`/mood [–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ]` \- –°–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n"
         "`/reset` \- –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å\n"
         "`/mutebot` \- –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å\n"
         "`/unmutebot` \- –†–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å"
    )
    full_help_text = help_text_general
    if not is_private_chat:
         with next(get_db()) as db: persona_info = get_persona_and_context_with_owner(chat_id, db)
         if persona_info: full_help_text += help_text_chat
         else: full_help_text += "\n\n_\(–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —á–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ `/addbot <id>`\)_"
    await update.message.reply_text(full_help_text, reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN_V2)

async def mood(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–µ –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞."""
    is_callback = update.callback_query is not None; msg = update.callback_query.message if is_callback else update.message; if not msg: return
    chat_id=str(msg.chat.id); user=update.effective_user; user_id=user.id; username=user.username or f"id_{user_id}"; logger.info(f"CMD /mood or Action < User {user_id} ({username}) Chat {chat_id}")
    inst=None; persona=None; moods=[]; cur_mood="–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"; p_id="unknown"
    with next(get_db()) as db:
        try: info = get_persona_and_context_with_owner(chat_id, db)
            if not info: reply=escape_markdown("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏. ü§∑‚Äç‚ôÇÔ∏è\n–î–æ–±–∞–≤—å –ª–∏—á–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥–æ–π `/addbot <id>` (ID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ /mypersonas –≤ –ª–∏—á–∫–µ —Å–æ –º–Ω–æ–π).", version=2); logger.debug(f"No active persona chat {chat_id} /mood."); try: await query.edit_message_text(reply, parse_mode=ParseMode.MARKDOWN_V2) if is_callback else await msg.reply_text(reply, parse_mode=ParseMode.MARKDOWN_V2) catch Exception as send_err: logger.error(f"Err send no persona: {send_err}"); return
            persona,_,owner=info; inst=persona.chat_instance; p_id=persona.id; escaped_persona_name = escape_markdown(persona.name, version=2)
            if not inst: logger.error(f"No ChatBotInstance {persona.name} chat {chat_id}"); await msg.reply_text(escape_markdown("–û—à–∏–±–∫–∞: –Ω–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
            if inst.is_muted: logger.debug(f"Persona '{persona.name}' muted."); reply=escape_markdown(f"–õ–∏—á–Ω–æ—Å—Ç—å '{persona.name}' –∑–∞–≥–ª—É—à–µ–Ω–∞ (/unmutebot).", version=2); try: await query.edit_message_text(reply, parse_mode=ParseMode.MARKDOWN_V2) if is_callback else await msg.reply_text(reply, parse_mode=ParseMode.MARKDOWN_V2) catch Exception as send_err: logger.error(f"Err send muted: {send_err}"); return
            moods=persona.get_all_mood_names(); cur_mood=inst.current_mood or "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
            if not moods: reply = escape_markdown(f"–£ –ª–∏—á–Ω–æ—Å—Ç–∏ '{persona.name}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.", version=2); logger.warning(f"{persona.name} no moods."); try: await query.edit_message_text(reply, parse_mode=ParseMode.MARKDOWN_V2) if is_callback else await msg.reply_text(reply, parse_mode=ParseMode.MARKDOWN_V2) catch Exception as send_err: logger.error(f"Err send no moods: {send_err}"); return
        except SQLAlchemyError as e: logger.error(f"DB error fetch /mood chat {chat_id}: {e}", exc_info=True); await msg.reply_text(escape_markdown("–æ—à–∏–±–∫–∞ –±–¥.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
        except Exception as e: logger.error(f"Error fetch /mood chat {chat_id}: {e}", exc_info=True); await msg.reply_text(escape_markdown("–Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
    moods_lower={m.lower():m for m in moods}; arg_lower=None; target_mood=None
    if is_callback and query.data.startswith("set_mood_"): parts=query.data.split('_'); arg_lower="_".join(parts[2:-1]).lower() if len(parts)>=4 else None; target_mood=moods_lower.get(arg_lower)
    elif not is_callback: text=""; args=context.args; if args: text=" ".join(args); elif update.message and update.message.text: poss=update.message.text.strip(); text=poss if poss.lower() in moods_lower else ""
        if text: arg_lower=text.lower(); target_mood=moods_lower.get(arg_lower)
    escaped_cur_mood = escape_markdown(cur_mood, version=2)
    if target_mood and inst: set_mood_for_chat_bot(SessionLocal(), inst.id, target_mood); reply=f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–ª—è '{escaped_persona_name}' —Ç–µ–ø–µ—Ä—å: *{escape_markdown(target_mood, version=2)}*"; logger.info(f"Mood set {persona.name} chat {chat_id} -> {target_mood}.")
    else: kbd=[[InlineKeyboardButton(m.capitalize(), callback_data=f"set_mood_{m.lower()}_{p_id}")] for m in moods]; markup=InlineKeyboardMarkup(kbd); reply=f"–¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: *{escaped_cur_mood}*\. –í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –¥–ª—è '{escaped_persona_name}':" if not arg_lower else f"–ù–µ –∑–Ω–∞—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è '{escape_markdown(arg_lower, version=2)}'\. –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:"; logger.debug(f"{'Invalid mood' if arg_lower else 'Sent'} mood selection chat {chat_id}.")
    try: if is_callback: await query.edit_message_text(reply, reply_markup=markup, parse_mode=ParseMode.MARKDOWN_V2) if (query.message.text != reply or query.message.reply_markup != markup) else await query.answer(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {target_mood}" if target_mood else None)
        else: await msg.reply_text(reply, reply_markup=markup, parse_mode=ParseMode.MARKDOWN_V2)
    except BadRequest as e: logger.warning(f"Failed to edit mood message (maybe not modified?): {e}")
    except Exception as send_err: logger.error(f"Error sending mood msg/kbd: {send_err}")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message: return; chat_id=str(update.effective_chat.id); user_id=update.effective_user.id; username=update.effective_user.username or f"id_{user_id}"; logger.info(f"CMD /reset < User {user_id} ({username}) Chat {chat_id}"); await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    with next(get_db()) as db:
        try:
            info = get_persona_and_context_with_owner(chat_id, db)
            if not info: reply=escape_markdown("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞. ü§∑‚Äç‚ôÇÔ∏è\n–î–æ–±–∞–≤—å –ª–∏—á–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥–æ–π `/addbot <id>`.", version=2); await update.message.reply_text(reply, reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN_V2); return
            persona, _, owner = info; escaped_persona_name = escape_markdown(persona.name, version=2)
            if owner.telegram_id != user_id and not is_admin(user_id): logger.warning(f"User {user_id} attempted reset {persona.name} owned by {owner.telegram_id}"); await update.message.reply_text(escape_markdown("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
            inst = persona.chat_instance
            if not inst: logger.error(f"Reset cmd: No ChatBotInstance {persona.name}"); await update.message.reply_text(escape_markdown("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
            deleted_count = db.query(ChatContext).filter(ChatContext.chat_bot_instance_id == inst.id).delete(synchronize_session='fetch')
            db.commit(); logger.info(f"Deleted {deleted_count} context msgs {inst.id} ('{persona.name}') chat {chat_id} by {user_id}.")
            await update.message.reply_text(f"–ü–∞–º—è—Ç—å –ª–∏—á–Ω–æ—Å—Ç–∏ '{escaped_persona_name}' –æ—á–∏—â–µ–Ω–∞\.", parse_mode=ParseMode.MARKDOWN_V2)
        except SQLAlchemyError as e: logger.error(f"DB error /reset chat {chat_id}: {e}", exc_info=True); await update.message.reply_text(escape_markdown("–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–±—Ä–æ—Å–µ.", version=2), parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e: logger.error(f"Error /reset chat {chat_id}: {e}", exc_info=True); await update.message.reply_text(escape_markdown("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ.", version=2), parse_mode=ParseMode.MARKDOWN_V2)

async def create_persona(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message: return; user_id=update.effective_user.id; username=update.effective_user.username or f"id_{user_id}"; chat_id=str(update.effective_chat.id); logger.info(f"CMD /createpersona < User {user_id} ({username}) args: {context.args}"); await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    args=context.args
    if not args: await update.message.reply_text(escape_markdown("—É–∫–∞–∂–∏ –∏–º—è:\n`/createpersona <–∏–º—è> [–æ–ø–∏—Å–∞–Ω–∏–µ]`\n_–∏–º—è: 2-50, –æ–ø–∏—Å–∞–Ω–∏–µ: –¥–æ 1500 (–Ω–µ–æ–±—è–∑.)_", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
    name=args[0]; desc=" ".join(args[1:]) if len(args)>1 else None; escaped_name = escape_markdown(name, version=2)
    if len(name)<2 or len(name)>50: await update.message.reply_text(escape_markdown("–∏–º—è: 2-50 —Å–∏–º–≤–æ–ª–æ–≤.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
    if desc and len(desc)>1500: await update.message.reply_text(escape_markdown("–æ–ø–∏—Å–∞–Ω–∏–µ: –º–∞–∫—Å 1500.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
    with next(get_db()) as db:
        try:
            user=get_or_create_user(db, user_id, username); count=db.query(func.count(PersonaConfig.id)).filter(PersonaConfig.owner_id == user.id).scalar()
            user_for_check = db.query(User).options(joinedload(User.persona_configs)).filter(User.id == user.id).one() # –î–ª—è can_create_persona
            if not user_for_check.can_create_persona: logger.warning(f"User {user_id} limit hit ({count}/{user.persona_limit})."); status="‚≠ê Premium" if user.is_active_subscriber else "üÜì Free"; text=f"—É–ø—Å\! –ª–∏–º–∏—Ç –ª–∏—á–Ω–æ—Å—Ç–µ–π \({count}/{user.persona_limit}\) –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ **{escape_markdown(status, version=2)}**\. üòü\n–ò—Å–ø–æ–ª—å–∑—É–π /subscribe"; await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN_V2); return
            existing=get_persona_by_name_and_owner(db, user.id, name);
            if existing: await update.message.reply_text(f"–∏–º—è '{escaped_name}' —É–∂–µ –µ—Å—Ç—å\. –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ\.", parse_mode=ParseMode.MARKDOWN_V2); return
            new_p=create_persona_config(db, user.id, name, desc); escaped_new_name = escape_markdown(new_p.name, version=2)
            await update.message.reply_text(f"‚úÖ –ª–∏—á–Ω–æ—Å—Ç—å '{escaped_new_name}' —Å–æ–∑–¥–∞–Ω–∞\!\nid: `{new_p.id}`\n—É–ø—Ä–∞–≤–ª—è–π —á–µ—Ä–µ–∑ /mypersonas", parse_mode=ParseMode.MARKDOWN_V2)
            logger.info(f"User {user_id} created persona: '{new_p.name}' (ID: {new_p.id})")
        except IntegrityError: logger.warning(f"IntegrityError create_persona user {user_id} name '{name}'."); await update.message.reply_text(f"–æ—à–∏–±–∫–∞: –∏–º—è '{escaped_name}' —É–∂–µ –∑–∞–Ω—è—Ç–æ\.", parse_mode=ParseMode.MARKDOWN_V2)
        except SQLAlchemyError as e: logger.error(f"SQLAlchemyError create_persona user {user_id}: {e}", exc_info=True); await update.message.reply_text(escape_markdown("–æ—à–∏–±–∫–∞ –±–¥.", version=2), parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e: logger.error(f"Error create_persona user {user_id}: {e}", exc_info=True); await update.message.reply_text(escape_markdown("–æ—à–∏–±–∫–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2)

async def my_personas(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    is_callback = update.callback_query is not None; message = update.callback_query.message if is_callback else update.message; if not message: return
    user_id = update.effective_user.id; username = update.effective_user.username or f"id_{user_id}"; chat_id = str(message.chat.id); logger.info(f"CMD /mypersonas or CB < User {user_id} ({username}) Chat {chat_id}")
    if is_callback: await update.callback_query.answer()
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    with next(get_db()) as db:
        try:
            user = get_or_create_user(db, user_id, username)
            user_with_personas = db.query(User).options(joinedload(User.persona_configs)).filter(User.id == user.id).first()
            if not user_with_personas: logger.error(f"User {user_id} not found my_personas."); await message.reply_text(escape_markdown("–û—à–∏–±–∫–∞: —é–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
            personas = sorted(user_with_personas.persona_configs, key=lambda p: p.name.lower()) if user_with_personas.persona_configs else []
            limit = user_with_personas.persona_limit; count = len(personas)
            db.commit()
            if not personas: text = f"—É —Ç–µ–±—è –Ω–µ—Ç –ª–∏—á–Ω–æ—Å—Ç–µ–π \(–ª–∏–º–∏—Ç: {count}/{limit}\)\.\n–°–æ–∑–¥–∞–π: `/createpersona <–∏–º—è>`"; markup = None
            else: text = f"*–¢–≤–æ–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ \({count}/{limit}\):*\n\n–ù–∞–∂–º–∏ –Ω–∞ –∏–º—è –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\.\n–î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç: `/addbot <id>` \(–∏—Å–ø–æ–ª—å–∑—É–π –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ\)\."; kbd = []
                for p in personas: escaped_p_name=escape_markdown(p.name, version=2); kbd.append([InlineKeyboardButton(f"üë§ {escaped_p_name} (ID: {p.id})", callback_data=f"edit_persona_{p.id}")]); kbd.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_persona_{p.id}")])
                markup = InlineKeyboardMarkup(kbd)
            if is_callback: query=update.callback_query; await query.edit_message_text(text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN_V2) if (query.message.text != text or query.message.reply_markup != markup) else None
            else: await message.reply_text(text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN_V2)
            logger.info(f"User {user_id} mypersonas. Sent {count} personas.")
        except SQLAlchemyError as e: logger.error(f"DB error /mypersonas user {user_id}: {e}", exc_info=True); await message.reply_text(escape_markdown("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–µ–π.", version=2), parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e: logger.error(f"Error /mypersonas user {user_id}: {e}", exc_info=True); await message.reply_text(escape_markdown("–æ—à–∏–±–∫–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2)

async def add_bot_to_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, persona_id: Optional[int] = None) -> None:
    is_callback = update.callback_query is not None; msg = update.callback_query.message if is_callback else update.message; if not msg: return
    user=update.effective_user; user_id=user.id; username=user.username or f"id_{user_id}"; chat_id=str(msg.chat.id); chat_title=msg.chat.title or f"Chat {chat_id}"; local_pid = persona_id
    if is_callback and local_pid is None: try: local_pid=int(query.data.split('_')[-1]) catch (IndexError, ValueError): logger.error(f"Parse pid fail CB: {query.data}"); await query.answer("–û—à–∏–±–∫–∞ ID.", show_alert=True); return
    elif not is_callback: args=context.args; logger.info(f"CMD /addbot < User {user_id} ({username}) Chat '{chat_title}' ({chat_id}) args: {args}"); if not args or len(args)!=1 or not args[0].isdigit(): await msg.reply_text(escape_markdown("—Ñ–æ—Ä–º–∞—Ç: `/addbot <id>`\n(ID –∏–∑ /mypersonas)", version=2), parse_mode=ParseMode.MARKDOWN_V2); return; try: local_pid=int(args[0]) catch ValueError: await msg.reply_text(escape_markdown("ID —á–∏—Å–ª–æ–º.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
    if local_pid is None: logger.error("add_bot: pid is None."); await query.answer("–û—à–∏–±–∫–∞ ID.", show_alert=True) if is_callback else await msg.reply_text(escape_markdown("–û—à–∏–±–∫–∞ ID.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
    if is_callback: await query.answer("–î–æ–±–∞–≤–ª—è–µ–º...")
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    with next(get_db()) as db:
        try:
            persona=get_persona_by_id_and_owner(db, user_id, local_pid); escaped_pid = escape_markdown(str(local_pid), version=2)
            if not persona: response=f"–ª–∏—á–Ω–æ—Å—Ç—å id `{escaped_pid}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Ç–≤–æ—è."; await query.edit_message_text(response, parse_mode=ParseMode.MARKDOWN_V2) if is_callback else await msg.reply_text(response, reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN_V2); return
            escaped_persona_name = escape_markdown(persona.name, version=2)
            existing=db.query(ChatBotInstance).filter(ChatBotInstance.chat_id == chat_id, ChatBotInstance.active == True).options(joinedload(ChatBotInstance.bot_instance_ref)).first()
            if existing:
                if existing.bot_instance_ref and existing.bot_instance_ref.persona_config_id == local_pid: response=f"–ª–∏—á–Ω–æ—Å—Ç—å '{escaped_persona_name}' —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞."; await query.answer(response, show_alert=True) if is_callback else await msg.reply_text(response, parse_mode=ParseMode.MARKDOWN_V2); return
                else: logger.info(f"Deactivating prev bot {existing.bot_instance_id} chat {chat_id}"); existing.active = False
            owner_int_id=persona.owner_id; bot_inst=db.query(BotInstance).filter(BotInstance.persona_config_id == local_pid).first()
            if not bot_inst: logger.info(f"Creating BotInstance persona {local_pid}"); bot_inst=BotInstance(owner_id=owner_int_id, persona_config_id=local_pid, name=f"Inst:{persona.name}"[:50]); db.add(bot_inst); db.flush(); db.refresh(bot_inst); logger.info(f"Staged BotInstance {bot_inst.id}")
            chat_link=db.query(ChatBotInstance).filter(ChatBotInstance.chat_id == chat_id, ChatBotInstance.bot_instance_id == bot_inst.id).first(); needs_clear=False
            if chat_link:
                if not chat_link.active: logger.info(f"Reactivating CBI {chat_link.id}"); chat_link.active=True; chat_link.current_mood="–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"; chat_link.is_muted=False; needs_clear=True
                else: logger.debug(f"CBI link {bot_inst.id} chat {chat_id} already active.")
            else: logger.info(f"Creating CBI link bot {bot_inst.id} chat {chat_id}"); chat_link=ChatBotInstance(chat_id=chat_id, bot_instance_id=bot_inst.id, active=True, current_mood="–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ", is_muted=False); db.add(chat_link); needs_clear=True
            if needs_clear and chat_link: db.flush(); db.refresh(chat_link); deleted=db.query(ChatContext).filter(ChatContext.chat_bot_instance_id==chat_link.id).delete(synchronize_session='fetch'); logger.debug(f"Cleared {deleted} context {chat_link.id}.")
            db.commit(); logger.info(f"Committed add_bot_to_chat bot {bot_inst.id} (Persona {local_pid}) chat {chat_id}. CBI ID: {chat_link.id if chat_link else 'N/A'}")
            response=f"‚úÖ –ª–∏—á–Ω–æ—Å—Ç—å '{escaped_persona_name}' \(id: `{escaped_pid}`\) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ\!"; response+=" –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞\." if needs_clear else ""
            await context.bot.send_message(chat_id=chat_id, text=response, reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN_V2)
            if is_callback: try: await query.delete_message() catch Exception as del_err: logger.warning(f"Could not delete CB msg: {del_err}")
        except IntegrityError as e: logger.warning(f"IntegrityError addbot pid {local_pid} chat {chat_id}: {e}", exc_info=True); await context.bot.send_message(chat_id=chat_id, text=escape_markdown("–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", version=2), parse_mode=ParseMode.MARKDOWN_V2)
        except SQLAlchemyError as e: logger.error(f"DB error /addbot pid {local_pid} chat {chat_id}: {e}", exc_info=True); await context.bot.send_message(chat_id=chat_id, text=escape_markdown("–æ—à–∏–±–∫–∞ –±–¥.", version=2), parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e: logger.error(f"Error adding bot {local_pid} chat {chat_id}: {e}", exc_info=True); await context.bot.send_message(chat_id=chat_id, text=escape_markdown("–æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", version=2), parse_mode=ParseMode.MARKDOWN_V2)

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query; if not query or not query.data: return
    chat_id_obj=query.message.chat if query.message else None; chat_id=str(chat_id_obj.id) if chat_id_obj else "Unknown"; user=query.from_user; user_id=user.id; username=user.username or f"id_{user_id}"; data=query.data; logger.info(f"CALLBACK < User {user_id} ({username}) Chat {chat_id} data: {data}")
    if data == "show_my_personas": await query.answer(); await my_personas(update, context)
    elif data == "create_persona_info": await query.answer(); await query.edit_message_text(escape_markdown("–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–∏—á–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n`/createpersona <–∏–º—è> [–æ–ø–∏—Å–∞–Ω–∏–µ]`\n\n*–ü—Ä–∏–º–µ—Ä:* `/createpersona –º–æ–π_–±–æ—Ç —è –≤–µ—Å–µ–ª—ã–π –±–æ—Ç –¥–ª—è –¥—Ä—É–∑–µ–π`", version=2), reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]]), parse_mode=ParseMode.MARKDOWN_V2)
    elif data == "subscribe_info": await query.answer(); await subscribe(update, context, from_callback=True)
    elif data == "back_to_start": await query.answer(); await query.delete_message() if query.message else None; await start(update, context) # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –∏ –≤—ã–∑—ã–≤–∞–µ–º start
    elif data == "view_tos": await query.answer(); await view_tos(update, context)
    elif data == "confirm_pay": await query.answer(); await confirm_pay(update, context)
    elif data == "subscribe_pay": await query.answer("–°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É..."); await generate_payment_link(update, context)
    elif data.startswith("set_mood_"): await query.answer(); await mood(update, context)
    elif data.startswith("add_bot_"): logger.warning(f"Received add_bot_ CB '{data}'."); await query.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∑–¥–µ—Å—å", show_alert=True) # –£–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É, –Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–≤–∏–º
    elif data.startswith("dummy_"): await query.answer()
    elif data.startswith(("edit_persona_", "delete_persona_", "edit_field_", "edit_mood", "deletemood", "cancel_edit", "edit_persona_back", "delete_persona_confirm_", "delete_persona_cancel")): logger.debug(f"CB '{data}' routed to ConvHandler."); pass
    else: logger.warning(f"Unhandled CB data: {data} user {user_id}"); try: await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") catch Exception as e: logger.warning(f"Failed answer unhandled CB {query.id}: {e}")

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message: return; user_id = update.effective_user.id; username = update.effective_user.username or f"id_{user_id}"; logger.info(f"CMD /profile < User {user_id} ({username})"); await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    with next(get_db()) as db:
        try:
            user = get_or_create_user(db, user_id, username); check_and_update_user_limits(db, user);
            persona_count = db.query(func.count(PersonaConfig.id)).filter(PersonaConfig.owner_id == user.id).scalar() or 0; db.commit(); logger.debug(f"Committed changes /profile user {user_id}."); db.refresh(user)
            is_active = user.is_active_subscriber; status = "‚≠ê Premium" if is_active else "üÜì Free"; expires = f"–∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_expires_at.strftime('%d.%m.%Y %H:%M')} UTC" if is_active and user.subscription_expires_at else "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
            escaped_expires = escape_markdown(expires, version=2); escaped_status = escape_markdown(status, version=2)
            text = (f"üë§ **—Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å**\n\n—Å—Ç–∞—Ç—É—Å: **{escaped_status}**\n{escaped_expires}\n\n**–ª–∏–º–∏—Ç—ã:**\n—Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è: {user.daily_message_count}/{user.message_limit}\n—Å–æ–∑–¥–∞–Ω–æ –ª–∏—á–Ω–æ—Å—Ç–µ–π: {persona_count}/{user.persona_limit}\n\n")
            if not is_active: text += "üöÄ —Ö–æ—á–µ—à—å –±–æ–ª—å—à–µ? –∂–º–∏ /subscribe \!"
            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN_V2)
        except SQLAlchemyError as e: logger.error(f"DB error /profile user {user_id}: {e}", exc_info=True); await update.message.reply_text(escape_markdown("–æ—à–∏–±–∫–∞ –±–¥.", version=2), parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e: logger.error(f"Error /profile user {user_id}: {e}", exc_info=True); await update.message.reply_text(escape_markdown("–æ—à–∏–±–∫–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2)

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE, from_callback: bool = False) -> None:
    user=update.effective_user; user_id=user.id; username=user.username or f"id_{user_id}"; logger.info(f"CMD /subscribe or CB < User {user_id} ({username})")
    msg=update.callback_query.message if from_callback else update.message; if not msg: return
    yk_ready = bool(config.YOOKASSA_SHOP_ID and config.YOOKASSA_SECRET_KEY and config.YOOKASSA_SHOP_ID.isdigit())
    text=""; markup=None
    if not yk_ready: text = escape_markdown("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. üò• (–ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)", version=2); logger.warning("YK creds not set/invalid subscribe handler.")
    else:
        text = (
            f"‚ú® **–ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ \({config.SUBSCRIPTION_PRICE_RUB:.0f} {config.SUBSCRIPTION_CURRENCY}/–º–µ—Å\)** ‚ú®\n\n"
            "–ø–æ–ª—É—á–∏ –º–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\n"
            f"‚úÖ **{config.PAID_DAILY_MESSAGE_LIMIT}** —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å \(–≤–º–µ—Å—Ç–æ {config.FREE_DAILY_MESSAGE_LIMIT}\)\n"
            f"‚úÖ **{config.PAID_PERSONA_LIMIT}** –ª–∏—á–Ω–æ—Å—Ç–µ–π \(–≤–º–µ—Å—Ç–æ {config.FREE_PERSONA_LIMIT}\)\n"
            f"‚úÖ –ø–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤\n"
            f"‚úÖ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç\. —Å–≤–æ–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π\n\n"
            # f"‚úÖ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ \(–µ—Å–ª–∏ –±—É–¥–µ—Ç\)\n\n"
            f"–ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç {config.SUBSCRIPTION_DURATION_DAYS} –¥–Ω–µ–π\."
        )
        kbd = [[InlineKeyboardButton("üìú –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data="view_tos")], [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –£—Å–ª–æ–≤–∏—è –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data="confirm_pay")]]
        if from_callback: kbd.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")])
        markup = InlineKeyboardMarkup(kbd)
    try:
        if from_callback: query=update.callback_query; await query.edit_message_text(text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN_V2) if (query.message.text != text or query.message.reply_markup != markup) else None
        else: await msg.reply_text(text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN_V2)
    except BadRequest as e: logger.warning(f"Failed edit subscribe msg (not modified?): {e}")
    except Exception as e: logger.error(f"Failed send/edit subscribe msg user {user_id}: {e}"); if from_callback: try: await context.bot.send_message(chat_id=msg.chat.id, text=text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN_V2) catch Exception as send_e: logger.error(f"Failed send fallback subscribe msg user {user_id}: {send_e}")

async def view_tos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query=update.callback_query; if not query or not query.message: return; user_id=query.from_user.id; logger.info(f"User {user_id} requested ToS.")
    tos_url = context.bot_data.get('tos_url'); text = ""; kbd = []
    if tos_url: kbd = [[InlineKeyboardButton("üìú –û—Ç–∫—Ä—ã—Ç—å –°–æ–≥–ª–∞—à–µ–Ω–∏–µ (Telegra.ph)", url=tos_url)], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ü–æ–¥–ø–∏—Å–∫–µ", callback_data="subscribe_info")]]; text = escape_markdown("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –°–æ–≥–ª–∞—à–µ–Ω–∏–µ–º, –æ—Ç–∫—Ä—ã–≤ –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:", version=2)
    else: logger.error(f"ToS URL not found bot_data user {user_id}."); text = escape_markdown("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", version=2); kbd = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ü–æ–¥–ø–∏—Å–∫–µ", callback_data="subscribe_info")]]
    markup=InlineKeyboardMarkup(kbd)
    try: await query.edit_message_text(text, reply_markup=markup, disable_web_page_preview=True, parse_mode=ParseMode.MARKDOWN_V2) if (query.message.text != text or query.message.reply_markup != markup) else None
    except BadRequest as e: logger.warning(f"Failed edit ToS msg (not modified?): {e}")
    except Exception as e: logger.error(f"Failed show ToS user {user_id}: {e}"); await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å.", show_alert=True)

async def confirm_pay(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query=update.callback_query; if not query or not query.message: return; user_id=query.from_user.id; logger.info(f"User {user_id} confirmed ToS.")
    tos_url=context.bot_data.get('tos_url'); yk_ready=bool(config.YOOKASSA_SHOP_ID and config.YOOKASSA_SECRET_KEY and config.YOOKASSA_SHOP_ID.isdigit()); text=""; markup=None
    if not yk_ready: text=escape_markdown("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. üò• (–ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)", version=2); markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="subscribe_info")]]); logger.warning("YK creds not set/invalid confirm_pay.")
    else: tos_link=f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –°–æ–≥–ª–∞—à–µ–Ω–∏–µ–º]({tos_url})" if tos_url else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –°–æ–≥–ª–∞—à–µ–Ω–∏–µ–º"; text = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ\!\n\n–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –Ω–∏–∂–µ, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–Ω—ã —Å {tos_link}\.\n\nüëá"; kbd = [[InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {config.SUBSCRIPTION_PRICE_RUB:.0f} {config.SUBSCRIPTION_CURRENCY}", callback_data="subscribe_pay")]];
        if tos_url: kbd.append([InlineKeyboardButton("üìú –£—Å–ª–æ–≤–∏—è (–ø—Ä–æ—á–∏—Ç–∞–Ω–æ)", url=tos_url)])
        kbd.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="subscribe_info")]); markup=InlineKeyboardMarkup(kbd)
    try: await query.edit_message_text(text, reply_markup=markup, disable_web_page_preview=not bool(tos_url), parse_mode=ParseMode.MARKDOWN_V2) if (query.message.text != text or query.message.reply_markup != markup) else None
    except BadRequest as e: logger.warning(f"Failed edit confirm_pay msg (not modified?): {e}")
    except Exception as e: logger.error(f"Failed show final payment confirm user {user_id}: {e}")

async def generate_payment_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; user_id = query.from_user.id; logger.info(f"--- generate_payment_link ENTERED user {user_id} ---")
    yk_ready = bool(config.YOOKASSA_SHOP_ID and config.YOOKASSA_SECRET_KEY and config.YOOKASSA_SHOP_ID.isdigit()); if not yk_ready: logger.error("YK creds invalid payment gen."); await query.edit_message_text(escape_markdown("‚ùå –æ—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
    shop_id_str=config.YOOKASSA_SHOP_ID; secret=config.YOOKASSA_SECRET_KEY; shop_id_int=0
    try: shop_id_int = int(shop_id_str);
        if not YookassaConfig.secret_key or YookassaConfig.account_id != shop_id_int: logger.info(f"Configuring YK SDK gen_link. Shop: {shop_id_str}, Secret Set: {bool(secret)}"); YookassaConfig.configure(shop_id_int, secret);
        if not (YookassaConfig.account_id == shop_id_int and YookassaConfig.secret_key == secret): raise RuntimeError("Failed YK config check.")
        logger.info("YK SDK configured successfully.")
    except ValueError: logger.error(f"YK Shop ID '{shop_id_str}' invalid int."); await query.edit_message_text(escape_markdown("‚ùå –æ—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –º–∞–≥–∞–∑–∏–Ω–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
    except Exception as conf_e: logger.error(f"Failed YK config gen_link: {conf_e}", exc_info=True); await query.edit_message_text(escape_markdown("‚ùå –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
    idempotence=str(uuid.uuid4()); desc=f"Premium @NunuAiBot {config.SUBSCRIPTION_DURATION_DAYS} –¥–Ω–µ–π (User: {user_id})"; meta={'telegram_user_id': str(user_id)}; bot_user="YourBot"; try: me=await context.bot.get_me(); bot_user=me.username or bot_user catch Exception: pass; return_url=f"https://t.me/{bot_user}"
    try: price=f"{config.SUBSCRIPTION_PRICE_RUB:.2f}"; items=[ReceiptItem({"description":f"–ü—Ä–µ–º–∏—É–º @{bot_user} {config.SUBSCRIPTION_DURATION_DAYS} –¥–Ω.","quantity":1.0,"amount":{"value":price,"currency":config.SUBSCRIPTION_CURRENCY},"vat_code":"1","payment_mode":"full_prepayment","payment_subject":"service"})]; email=f"user_{user_id}@telegram.bot"; receipt=Receipt({"customer":{"email":email},"items":items}); logger.debug("Receipt prepared.")
    except Exception as r_e: logger.error(f"Error prep receipt: {r_e}", exc_info=True); await query.edit_message_text(escape_markdown("‚ùå –æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ–∫–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
    try: builder=PaymentRequestBuilder(); builder.set_amount({"value":price,"currency":config.SUBSCRIPTION_CURRENCY}).set_capture(True).set_confirmation({"type":"redirect","return_url":return_url}).set_description(desc).set_metadata(meta).set_receipt(receipt); request=builder.build()
        logger.info(f"Attempt YK Payment.create. Shop: {YookassaConfig.account_id}, Idemp: {idempotence}"); logger.debug(f"Payment request: {request.json()}")
        payment = await asyncio.to_thread(Payment.create, request, idempotence)
        if not payment or not payment.confirmation or not payment.confirmation.confirmation_url: logger.error(f"YK API invalid resp user {user_id}. Status: {payment.status if payment else 'N/A'}. Resp: {payment}"); err_msg=escape_markdown("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –æ—Ç –ø–ª–∞—Ç–µ–∂–µ–π", version=2); err_msg+=f" \(—Å—Ç–∞—Ç—É—Å: {payment.status}\)" if payment and payment.status else ""; err_msg+="\\.\n–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."; await query.edit_message_text(err_msg, parse_mode=ParseMode.MARKDOWN_V2); return
        confirm_url=payment.confirmation.confirmation_url; logger.info(f"Created YK payment {payment.id} user {user_id}. URL: {confirm_url}")
        kbd=[[InlineKeyboardButton("üîó –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=confirm_url)], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="subscribe_info")]]; markup=InlineKeyboardMarkup(kbd)
        await query.edit_message_text(escape_markdown("‚úÖ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∞!\n\n–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç).", version=2), reply_markup=markup, parse_mode=ParseMode.MARKDOWN_V2)
    except Exception as e: logger.error(f"Error YK payment create user {user_id}: {e}", exc_info=True); user_msg="‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É\. "; err_data=None
        if hasattr(e,'response') and hasattr(e.response,'json'): try: err_data=e.response.json() except: pass
        if err_data and err_data.get('type')=='error': code=err_data.get('code'); desc=err_data.get('description') or err_data.get('message'); logger.error(f"YK API Error: Code={code}, Desc={desc}, Data={err_data}"); user_msg+=f"\({escape_markdown(desc or code or '–¥–µ—Ç–∞–ª–∏ –≤ –ª–æ–≥–∞—Ö', version=2)}\)"
        elif isinstance(e,httpx.RequestError): user_msg+="–ü—Ä–æ–±–ª–µ–º–∞ —Å–µ—Ç–∏ —Å –ÆKassa\."
        else: user_msg+="–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\."; user_msg+="\n–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ\."; try: await query.edit_message_text(user_msg, parse_mode=ParseMode.MARKDOWN_V2) catch Exception as send_e: logger.error(f"Failed send error after payment fail: {send_e}")

# --- Conversation Handlers (–ø–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏) ---
# –í—Å—Ç–∞–≤–ª—è–µ–º —Å—é–¥–∞ –ø–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π ConversationHandler –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
# _start_edit_convo, edit_persona_start, edit_persona_button_callback, edit_persona_choice,
# edit_field_update, edit_max_messages_update, _get_edit_persona_keyboard,
# _try_return_to_edit_menu, _try_return_to_mood_menu, edit_moods_menu, edit_mood_choice,
# edit_mood_name_received, edit_mood_prompt_received, delete_mood_confirmed,
# _get_edit_moods_keyboard_internal, edit_persona_cancel, _start_delete_convo,
# delete_persona_start, delete_persona_button_callback, delete_persona_confirmed,
# delete_persona_cancel

# --- Mute/Unmute Handlers ---
async def mute_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message: return; chat_id=str(update.effective_chat.id); user_id=update.effective_user.id; logger.info(f"CMD /mutebot < User {user_id} Chat {chat_id}")
    with next(get_db()) as db:
        try: info=get_persona_and_context_with_owner(chat_id, db);
            if not info: reply=escape_markdown("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏. ü§∑‚Äç‚ôÇÔ∏è\n–î–æ–±–∞–≤—å: `/addbot <id>`.", version=2); await update.message.reply_text(reply, reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN_V2); return
            persona, _, owner = info; inst = persona.chat_instance; escaped_name = escape_markdown(persona.name, version=2)
            if owner.telegram_id != user_id and not is_admin(user_id): await update.message.reply_text(escape_markdown("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∑–∞–≥–ª—É—à–∏—Ç—å.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
            if not inst: await update.message.reply_text(escape_markdown("–û—à–∏–±–∫–∞: –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–∞ —Å–≤—è–∑–∏.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
            if not inst.is_muted: inst.is_muted=True; db.commit(); logger.info(f"Persona '{persona.name}' muted chat {chat_id} by {user_id}."); await update.message.reply_text(f"‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å '{escaped_name}' –∑–∞–≥–ª—É—à–µ–Ω–∞\. \(–∏—Å–ø–æ–ª—å–∑—É–π /unmutebot\)", parse_mode=ParseMode.MARKDOWN_V2)
            else: await update.message.reply_text(f"–õ–∏—á–Ω–æ—Å—Ç—å '{escaped_name}' —É–∂–µ –∑–∞–≥–ª—É—à–µ–Ω–∞\.", parse_mode=ParseMode.MARKDOWN_V2)
        except SQLAlchemyError as e: logger.error(f"DB error /mutebot chat {chat_id}: {e}", exc_info=True); await update.message.reply_text(escape_markdown("–û—à–∏–±–∫–∞ –ë–î.", version=2), parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e: logger.error(f"Error /mutebot chat {chat_id}: {e}", exc_info=True); await update.message.reply_text(escape_markdown("–û—à–∏–±–∫–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2)

async def unmute_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message: return; chat_id=str(update.effective_chat.id); user_id=update.effective_user.id; logger.info(f"CMD /unmutebot < User {user_id} Chat {chat_id}")
    with next(get_db()) as db:
        try:
            inst = db.query(ChatBotInstance).options(joinedload(ChatBotInstance.bot_instance_ref).joinedload(BotInstance.owner), joinedload(ChatBotInstance.bot_instance_ref).joinedload(BotInstance.persona_config)).filter(ChatBotInstance.chat_id == chat_id, ChatBotInstance.active == True).first()
            if not inst: reply=escape_markdown("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏. ü§∑‚Äç‚ôÇÔ∏è\n–î–æ–±–∞–≤—å: `/addbot <id>`.", version=2); await update.message.reply_text(reply, reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN_V2); return
            owner = inst.bot_instance_ref.owner if inst.bot_instance_ref else None; name_raw = inst.bot_instance_ref.persona_config.name if inst.bot_instance_ref and inst.bot_instance_ref.persona_config else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"; name = escape_markdown(name_raw, version=2)
            if not owner: await update.message.reply_text(escape_markdown("–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
            if owner.telegram_id != user_id and not is_admin(user_id): await update.message.reply_text(escape_markdown("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–Ω—è—Ç—å –∑–∞–≥–ª—É—à–∫—É.", version=2), parse_mode=ParseMode.MARKDOWN_V2); return
            if inst.is_muted: inst.is_muted=False; db.commit(); logger.info(f"Persona '{name_raw}' unmuted chat {chat_id} by {user_id}."); await update.message.reply_text(f"‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å '{name}' —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å\.", parse_mode=ParseMode.MARKDOWN_V2)
            else: await update.message.reply_text(f"–õ–∏—á–Ω–æ—Å—Ç—å '{name}' –Ω–µ –±—ã–ª–∞ –∑–∞–≥–ª—É—à–µ–Ω–∞\.", parse_mode=ParseMode.MARKDOWN_V2)
        except SQLAlchemyError as e: logger.error(f"DB error /unmutebot chat {chat_id}: {e}", exc_info=True); await update.message.reply_text(escape_markdown("–û—à–∏–±–∫–∞ –ë–î.", version=2), parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e: logger.error(f"Error /unmutebot chat {chat_id}: {e}", exc_info=True); await update.message.reply_text(escape_markdown("–û—à–∏–±–∫–∞.", version=2), parse_mode=ParseMode.MARKDOWN_V2)

# --- –ö–æ–Ω–µ—Ü handlers.py ---
