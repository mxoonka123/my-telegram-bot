# -*- coding: utf-8 -*-
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram –±–æ—Ç–∞
–í–Ω–µ–¥—Ä–µ–Ω–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
"""

import asyncio
import logging
from typing import Dict, Any, Optional, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ChatAction, ParseMode

from optimization.cache_manager import cache, cached, cache_user_data, get_cached_user_data
from optimization.db_optimized import (
    get_user_with_minimal_data,
    get_personas_list_optimized,
    get_active_chat_bot_optimized,
    check_user_access_optimized
)
import config
from db import get_db
from utils import escape_markdown_v2

logger = logging.getLogger(__name__)

# –ö–µ—à –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
KEYBOARD_CACHE = {}

def get_cached_keyboard(key: str, ttl: int = None) -> Optional[InlineKeyboardMarkup]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫–µ—à–∞"""
    return cache.get(f"keyboard:{key}")


def set_cached_keyboard(key: str, keyboard: InlineKeyboardMarkup, ttl: int = None):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∫–µ—à"""
    ttl = ttl or config.CACHE_TTL_MENU
    cache.set(f"keyboard:{key}", keyboard, ttl)


async def get_user_menu_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    –ö–µ—à–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 30 –º–∏–Ω—É—Ç
    """
    cache_key = f"menu_main_{user_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    cached = get_cached_keyboard(cache_key)
    if cached:
        return cached
    
    keyboard = [
        [
            InlineKeyboardButton("–ø—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile"),
            InlineKeyboardButton("–º–æ–∏ –ª–∏—á–Ω–æ—Å—Ç–∏", callback_data="show_mypersonas")
        ],
        [
            InlineKeyboardButton("–ø–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="buycredits_open"),
            InlineKeyboardButton("–ø–æ–º–æ—â—å", callback_data="show_help")
        ]
    ]
    
    markup = InlineKeyboardMarkup(keyboard)
    set_cached_keyboard(cache_key, markup, config.CACHE_TTL_MENU)
    
    return markup


async def get_personas_keyboard_optimized(user_id: int) -> InlineKeyboardMarkup:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î
    """
    cache_key = f"personas_kb_{user_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    cached = get_cached_keyboard(cache_key)
    if cached:
        return cached
    
    with get_db() as db:
        personas = await get_personas_list_optimized(db, user_id)
    
    if not personas:
        keyboard = [[InlineKeyboardButton("—Å–æ–∑–¥–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å", callback_data="create_persona")]]
    else:
        keyboard = []
        for p in personas:
            status = "üü¢" if p.get('bot_status') == 'active' else "‚ö™"
            btn_text = f"{status} {p['name']}"
            keyboard.append([
                InlineKeyboardButton(btn_text, callback_data=f"select_persona_{p['id']}")
            ])
        keyboard.append([
            InlineKeyboardButton("‚ûï —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="create_persona")
        ])
    
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –Ω–∞–∑–∞–¥", callback_data="show_menu")
    ])
    
    markup = InlineKeyboardMarkup(keyboard)
    set_cached_keyboard(cache_key, markup, config.CACHE_TTL_PERSONA)
    
    return markup


async def handle_callback_optimized(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î
    """
    query = update.callback_query
    if not query:
        return
    
    user_id = query.from_user.id
    data = query.data
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_cached_user_data(user_id)
    if not user_data:
        with get_db() as db:
            user_data = await get_user_with_minimal_data(db, user_id)
            if user_data:
                cache_user_data(user_id, user_data)
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö callback'–æ–≤
        if data == "show_menu":
            keyboard = await get_user_menu_keyboard(user_id)
            text = "–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            
            if query.message.text != text or query.message.reply_markup != keyboard:
                await query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode=None
                )
            else:
                await query.answer()
                
        elif data == "show_mypersonas":
            keyboard = await get_personas_keyboard_optimized(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω –∏–∑ –∫–µ—à–∞
            with get_db() as db:
                from optimization.db_optimized import get_user_personas_count
                count = await get_user_personas_count(db, user_id)
            
            text = f"—Ç–≤–æ–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ ({count}/{config.PAID_PERSONA_LIMIT})"
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode=None
            )
            
        elif data == "show_profile":
            # –ü—Ä–æ—Ñ–∏–ª—å –∏–∑ –∫–µ—à–∞
            if user_data:
                credits = user_data.get('credits', 0)
                username = user_data.get('username', f'user_{user_id}')
                
                text = f"üë§ –ø—Ä–æ—Ñ–∏–ª—å @{username}\n\nüí≥ –±–∞–ª–∞–Ω—Å: {credits:.2f} –∫—Ä–µ–¥–∏—Ç–æ–≤"
                
                keyboard = [
                    [InlineKeyboardButton("–ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="buycredits_open")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –Ω–∞–∑–∞–¥", callback_data="show_menu")]
                ]
                
                await query.edit_message_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=None
                )
            else:
                await query.answer("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)
                
        elif data.startswith("select_persona_"):
            try:
                persona_id = int(data.replace("select_persona_", ""))
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω—ã
                await query.answer(f"–≤—ã–±—Ä–∞–Ω–∞ –ª–∏—á–Ω–æ—Å—Ç—å #{persona_id}")
            except ValueError:
                await query.answer("–æ—à–∏–±–∫–∞", show_alert=True)
                
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback'–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            await query.answer()
            
    except Exception as e:
        logger.error(f"Error in optimized callback handler: {e}", exc_info=True)
        await query.answer("–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


def invalidate_user_keyboards(user_id: int):
    """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    patterns = [
        f"keyboard:menu_main_{user_id}",
        f"keyboard:personas_kb_{user_id}",
        f"keyboard:profile_{user_id}"
    ]
    for pattern in patterns:
        cache.delete(pattern)


# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–æ–≤ LLM
def parse_llm_response_optimized(text: str) -> List[str]:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç LLM
    –ë–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö regex fallback
    """
    import json
    
    # –ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ markdown
    if text.startswith("```") and text.endswith("```"):
        text = text[3:-3].strip()
        if text.startswith("json\n"):
            text = text[5:]
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
    try:
        parsed = json.loads(text)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç
        if isinstance(parsed, dict) and "response" in parsed:
            resp = parsed["response"]
            if isinstance(resp, list):
                return [str(x).strip() for x in resp if x]
            if isinstance(resp, str):
                return [resp.strip()] if resp.strip() else []
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫
        if isinstance(parsed, list):
            return [str(x).strip() for x in parsed if x]
            
    except json.JSONDecodeError:
        pass
    
    # –ü—Ä–æ—Å—Ç–æ–π fallback - —Ä–∞–∑–±–∏—Ç—å –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    lines = text.strip().split('\n')
    return [line.strip() for line in lines if line.strip()]


# HTTP –∫–ª–∏–µ–Ω—Ç —Å connection pooling
import httpx

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
http_client = httpx.AsyncClient(
    limits=httpx.Limits(
        max_keepalive_connections=20,
        max_connections=50,
        keepalive_expiry=30
    ),
    timeout=httpx.Timeout(config.HTTP_CLIENT_TIMEOUT)
)


async def send_to_api_optimized(
    url: str,
    headers: Dict[str, str],
    payload: Dict[str, Any]
) -> Dict[str, Any]:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç connection pooling
    """
    try:
        response = await http_client.post(url, json=payload, headers=headers)
        response.raise_for_status()
        return response.json()
    except httpx.HTTPStatusError as e:
        logger.error(f"API error: {e.response.status_code}")
        raise
    except Exception as e:
        logger.error(f"Request failed: {e}")
        raise


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫–µ—à–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def warm_up_cache():
    """–ü—Ä–æ–≥—Ä–µ–≤ –∫–µ—à–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("Starting cache warm-up...")
    
    with get_db() as db:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        from datetime import datetime, timezone, timedelta
        from db import User
        
        recent_users = db.query(User.telegram_id).filter(
            User.updated_at > datetime.now(timezone.utc) - timedelta(hours=2)
        ).limit(50).all()
        
        for user_id, in recent_users:
            try:
                # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é
                await get_user_menu_keyboard(user_id)
                
                # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
                user_data = await get_user_with_minimal_data(db, user_id)
                if user_data:
                    cache_user_data(user_id, user_data)
                    
            except Exception as e:
                logger.error(f"Failed to warm cache for user {user_id}: {e}")
    
    logger.info(f"Cache warmed up for {len(recent_users)} users")


# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
class PerformanceMonitor:
    """–ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.timings = {}
        
    async def measure(self, name: str, func, *args, **kwargs):
        """–ò–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"""
        import time
        start = time.perf_counter()
        
        try:
            result = await func(*args, **kwargs)
            elapsed = time.perf_counter() - start
            
            if name not in self.timings:
                self.timings[name] = []
            self.timings[name].append(elapsed)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            if elapsed > 1.0:
                logger.warning(f"Slow operation {name}: {elapsed:.2f}s")
                
            return result
        except Exception as e:
            elapsed = time.perf_counter() - start
            logger.error(f"Operation {name} failed after {elapsed:.2f}s: {e}")
            raise
    
    def get_stats(self) -> Dict[str, Dict[str, float]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = {}
        for name, times in self.timings.items():
            if times:
                stats[name] = {
                    'count': len(times),
                    'avg': sum(times) / len(times),
                    'min': min(times),
                    'max': max(times)
                }
        return stats


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
perf_monitor = PerformanceMonitor()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def log_performance_stats():
    """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    stats = perf_monitor.get_stats()
    if stats:
        logger.info("Performance stats:")
        for name, data in stats.items():
            logger.info(
                f"  {name}: count={data['count']}, "
                f"avg={data['avg']:.3f}s, "
                f"min={data['min']:.3f}s, "
                f"max={data['max']:.3f}s"
            )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
    cache_stats = cache.get_stats()
    logger.info(f"Cache stats: {cache_stats}")
